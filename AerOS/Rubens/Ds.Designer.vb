'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.18046
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds
    Inherits Global.System.Data.DataSet
    
    Private tableAEROPUERTO As AEROPUERTODataTable
    
    Private tableAVION As AVIONDataTable
    
    Private tableBOLETO As BOLETODataTable
    
    Private tableCIUDAD As CIUDADDataTable
    
    Private tableCLIENTE As CLIENTEDataTable
    
    Private tableESCALA As ESCALADataTable
    
    Private tableLINEA As LINEADataTable
    
    Private tablePAIS As PAISDataTable
    
    Private tablePERSONAL As PERSONALDataTable
    
    Private tablePROFESION As PROFESIONDataTable
    
    Private tableTURNO As TURNODataTable
    
    Private tableUSUARIO As USUARIODataTable
    
    Private tableVUELO As VUELODataTable
    
    Private relationFK_CIUD_AERO As Global.System.Data.DataRelation
    
    Private relationFK_LINEA_AVION As Global.System.Data.DataRelation
    
    Private relationFK_CLIE_BOLET As Global.System.Data.DataRelation
    
    Private relationFK_DEST_BOLET As Global.System.Data.DataRelation
    
    Private relationFK_SALIDA_BOLET As Global.System.Data.DataRelation
    
    Private relationFK_VUEL_BOLET As Global.System.Data.DataRelation
    
    Private relationFK_PAIS_CIUD As Global.System.Data.DataRelation
    
    Private relationFK_CLIENTE_USUARIO_1 As Global.System.Data.DataRelation
    
    Private relationFK_AERO_DESTINO As Global.System.Data.DataRelation
    
    Private relationFK_AERO_ESCALA As Global.System.Data.DataRelation
    
    Private relationFK_AERO_ORIGEN As Global.System.Data.DataRelation
    
    Private relationFK_LINEA_PERSONAL As Global.System.Data.DataRelation
    
    Private relationFK_PERSONAL_USUARIO_1 As Global.System.Data.DataRelation
    
    Private relationFK_PROFESI_PERSON As Global.System.Data.DataRelation
    
    Private relationFK_PERSONA_TURNO As Global.System.Data.DataRelation
    
    Private relationFK_VUELO_TURN As Global.System.Data.DataRelation
    
    Private relationFK_AERO_ATERR As Global.System.Data.DataRelation
    
    Private relationFK_AERO_DESP As Global.System.Data.DataRelation
    
    Private relationFK_AVIO_VUEL As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AEROPUERTO")) Is Nothing) Then
                MyBase.Tables.Add(New AEROPUERTODataTable(ds.Tables("AEROPUERTO")))
            End If
            If (Not (ds.Tables("AVION")) Is Nothing) Then
                MyBase.Tables.Add(New AVIONDataTable(ds.Tables("AVION")))
            End If
            If (Not (ds.Tables("BOLETO")) Is Nothing) Then
                MyBase.Tables.Add(New BOLETODataTable(ds.Tables("BOLETO")))
            End If
            If (Not (ds.Tables("CIUDAD")) Is Nothing) Then
                MyBase.Tables.Add(New CIUDADDataTable(ds.Tables("CIUDAD")))
            End If
            If (Not (ds.Tables("CLIENTE")) Is Nothing) Then
                MyBase.Tables.Add(New CLIENTEDataTable(ds.Tables("CLIENTE")))
            End If
            If (Not (ds.Tables("ESCALA")) Is Nothing) Then
                MyBase.Tables.Add(New ESCALADataTable(ds.Tables("ESCALA")))
            End If
            If (Not (ds.Tables("LINEA")) Is Nothing) Then
                MyBase.Tables.Add(New LINEADataTable(ds.Tables("LINEA")))
            End If
            If (Not (ds.Tables("PAIS")) Is Nothing) Then
                MyBase.Tables.Add(New PAISDataTable(ds.Tables("PAIS")))
            End If
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            If (Not (ds.Tables("PROFESION")) Is Nothing) Then
                MyBase.Tables.Add(New PROFESIONDataTable(ds.Tables("PROFESION")))
            End If
            If (Not (ds.Tables("TURNO")) Is Nothing) Then
                MyBase.Tables.Add(New TURNODataTable(ds.Tables("TURNO")))
            End If
            If (Not (ds.Tables("USUARIO")) Is Nothing) Then
                MyBase.Tables.Add(New USUARIODataTable(ds.Tables("USUARIO")))
            End If
            If (Not (ds.Tables("VUELO")) Is Nothing) Then
                MyBase.Tables.Add(New VUELODataTable(ds.Tables("VUELO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AEROPUERTO() As AEROPUERTODataTable
        Get
            Return Me.tableAEROPUERTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AVION() As AVIONDataTable
        Get
            Return Me.tableAVION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOLETO() As BOLETODataTable
        Get
            Return Me.tableBOLETO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CIUDAD() As CIUDADDataTable
        Get
            Return Me.tableCIUDAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CLIENTE() As CLIENTEDataTable
        Get
            Return Me.tableCLIENTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ESCALA() As ESCALADataTable
        Get
            Return Me.tableESCALA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LINEA() As LINEADataTable
        Get
            Return Me.tableLINEA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAIS() As PAISDataTable
        Get
            Return Me.tablePAIS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERSONAL() As PERSONALDataTable
        Get
            Return Me.tablePERSONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROFESION() As PROFESIONDataTable
        Get
            Return Me.tablePROFESION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TURNO() As TURNODataTable
        Get
            Return Me.tableTURNO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property USUARIO() As USUARIODataTable
        Get
            Return Me.tableUSUARIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VUELO() As VUELODataTable
        Get
            Return Me.tableVUELO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds = CType(MyBase.Clone,Ds)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("AEROPUERTO")) Is Nothing) Then
                MyBase.Tables.Add(New AEROPUERTODataTable(ds.Tables("AEROPUERTO")))
            End If
            If (Not (ds.Tables("AVION")) Is Nothing) Then
                MyBase.Tables.Add(New AVIONDataTable(ds.Tables("AVION")))
            End If
            If (Not (ds.Tables("BOLETO")) Is Nothing) Then
                MyBase.Tables.Add(New BOLETODataTable(ds.Tables("BOLETO")))
            End If
            If (Not (ds.Tables("CIUDAD")) Is Nothing) Then
                MyBase.Tables.Add(New CIUDADDataTable(ds.Tables("CIUDAD")))
            End If
            If (Not (ds.Tables("CLIENTE")) Is Nothing) Then
                MyBase.Tables.Add(New CLIENTEDataTable(ds.Tables("CLIENTE")))
            End If
            If (Not (ds.Tables("ESCALA")) Is Nothing) Then
                MyBase.Tables.Add(New ESCALADataTable(ds.Tables("ESCALA")))
            End If
            If (Not (ds.Tables("LINEA")) Is Nothing) Then
                MyBase.Tables.Add(New LINEADataTable(ds.Tables("LINEA")))
            End If
            If (Not (ds.Tables("PAIS")) Is Nothing) Then
                MyBase.Tables.Add(New PAISDataTable(ds.Tables("PAIS")))
            End If
            If (Not (ds.Tables("PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONALDataTable(ds.Tables("PERSONAL")))
            End If
            If (Not (ds.Tables("PROFESION")) Is Nothing) Then
                MyBase.Tables.Add(New PROFESIONDataTable(ds.Tables("PROFESION")))
            End If
            If (Not (ds.Tables("TURNO")) Is Nothing) Then
                MyBase.Tables.Add(New TURNODataTable(ds.Tables("TURNO")))
            End If
            If (Not (ds.Tables("USUARIO")) Is Nothing) Then
                MyBase.Tables.Add(New USUARIODataTable(ds.Tables("USUARIO")))
            End If
            If (Not (ds.Tables("VUELO")) Is Nothing) Then
                MyBase.Tables.Add(New VUELODataTable(ds.Tables("VUELO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAEROPUERTO = CType(MyBase.Tables("AEROPUERTO"),AEROPUERTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableAEROPUERTO) Is Nothing) Then
                Me.tableAEROPUERTO.InitVars
            End If
        End If
        Me.tableAVION = CType(MyBase.Tables("AVION"),AVIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAVION) Is Nothing) Then
                Me.tableAVION.InitVars
            End If
        End If
        Me.tableBOLETO = CType(MyBase.Tables("BOLETO"),BOLETODataTable)
        If (initTable = true) Then
            If (Not (Me.tableBOLETO) Is Nothing) Then
                Me.tableBOLETO.InitVars
            End If
        End If
        Me.tableCIUDAD = CType(MyBase.Tables("CIUDAD"),CIUDADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCIUDAD) Is Nothing) Then
                Me.tableCIUDAD.InitVars
            End If
        End If
        Me.tableCLIENTE = CType(MyBase.Tables("CLIENTE"),CLIENTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCLIENTE) Is Nothing) Then
                Me.tableCLIENTE.InitVars
            End If
        End If
        Me.tableESCALA = CType(MyBase.Tables("ESCALA"),ESCALADataTable)
        If (initTable = true) Then
            If (Not (Me.tableESCALA) Is Nothing) Then
                Me.tableESCALA.InitVars
            End If
        End If
        Me.tableLINEA = CType(MyBase.Tables("LINEA"),LINEADataTable)
        If (initTable = true) Then
            If (Not (Me.tableLINEA) Is Nothing) Then
                Me.tableLINEA.InitVars
            End If
        End If
        Me.tablePAIS = CType(MyBase.Tables("PAIS"),PAISDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePAIS) Is Nothing) Then
                Me.tablePAIS.InitVars
            End If
        End If
        Me.tablePERSONAL = CType(MyBase.Tables("PERSONAL"),PERSONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERSONAL) Is Nothing) Then
                Me.tablePERSONAL.InitVars
            End If
        End If
        Me.tablePROFESION = CType(MyBase.Tables("PROFESION"),PROFESIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROFESION) Is Nothing) Then
                Me.tablePROFESION.InitVars
            End If
        End If
        Me.tableTURNO = CType(MyBase.Tables("TURNO"),TURNODataTable)
        If (initTable = true) Then
            If (Not (Me.tableTURNO) Is Nothing) Then
                Me.tableTURNO.InitVars
            End If
        End If
        Me.tableUSUARIO = CType(MyBase.Tables("USUARIO"),USUARIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableUSUARIO) Is Nothing) Then
                Me.tableUSUARIO.InitVars
            End If
        End If
        Me.tableVUELO = CType(MyBase.Tables("VUELO"),VUELODataTable)
        If (initTable = true) Then
            If (Not (Me.tableVUELO) Is Nothing) Then
                Me.tableVUELO.InitVars
            End If
        End If
        Me.relationFK_CIUD_AERO = Me.Relations("FK_CIUD_AERO")
        Me.relationFK_LINEA_AVION = Me.Relations("FK_LINEA_AVION")
        Me.relationFK_CLIE_BOLET = Me.Relations("FK_CLIE_BOLET")
        Me.relationFK_DEST_BOLET = Me.Relations("FK_DEST_BOLET")
        Me.relationFK_SALIDA_BOLET = Me.Relations("FK_SALIDA_BOLET")
        Me.relationFK_VUEL_BOLET = Me.Relations("FK_VUEL_BOLET")
        Me.relationFK_PAIS_CIUD = Me.Relations("FK_PAIS_CIUD")
        Me.relationFK_CLIENTE_USUARIO_1 = Me.Relations("FK_CLIENTE_USUARIO_1")
        Me.relationFK_AERO_DESTINO = Me.Relations("FK_AERO_DESTINO")
        Me.relationFK_AERO_ESCALA = Me.Relations("FK_AERO_ESCALA")
        Me.relationFK_AERO_ORIGEN = Me.Relations("FK_AERO_ORIGEN")
        Me.relationFK_LINEA_PERSONAL = Me.Relations("FK_LINEA_PERSONAL")
        Me.relationFK_PERSONAL_USUARIO_1 = Me.Relations("FK_PERSONAL_USUARIO_1")
        Me.relationFK_PROFESI_PERSON = Me.Relations("FK_PROFESI_PERSON")
        Me.relationFK_PERSONA_TURNO = Me.Relations("FK_PERSONA_TURNO")
        Me.relationFK_VUELO_TURN = Me.Relations("FK_VUELO_TURN")
        Me.relationFK_AERO_ATERR = Me.Relations("FK_AERO_ATERR")
        Me.relationFK_AERO_DESP = Me.Relations("FK_AERO_DESP")
        Me.relationFK_AVIO_VUEL = Me.Relations("FK_AVIO_VUEL")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAEROPUERTO = New AEROPUERTODataTable()
        MyBase.Tables.Add(Me.tableAEROPUERTO)
        Me.tableAVION = New AVIONDataTable()
        MyBase.Tables.Add(Me.tableAVION)
        Me.tableBOLETO = New BOLETODataTable()
        MyBase.Tables.Add(Me.tableBOLETO)
        Me.tableCIUDAD = New CIUDADDataTable()
        MyBase.Tables.Add(Me.tableCIUDAD)
        Me.tableCLIENTE = New CLIENTEDataTable()
        MyBase.Tables.Add(Me.tableCLIENTE)
        Me.tableESCALA = New ESCALADataTable()
        MyBase.Tables.Add(Me.tableESCALA)
        Me.tableLINEA = New LINEADataTable()
        MyBase.Tables.Add(Me.tableLINEA)
        Me.tablePAIS = New PAISDataTable()
        MyBase.Tables.Add(Me.tablePAIS)
        Me.tablePERSONAL = New PERSONALDataTable()
        MyBase.Tables.Add(Me.tablePERSONAL)
        Me.tablePROFESION = New PROFESIONDataTable()
        MyBase.Tables.Add(Me.tablePROFESION)
        Me.tableTURNO = New TURNODataTable()
        MyBase.Tables.Add(Me.tableTURNO)
        Me.tableUSUARIO = New USUARIODataTable()
        MyBase.Tables.Add(Me.tableUSUARIO)
        Me.tableVUELO = New VUELODataTable()
        MyBase.Tables.Add(Me.tableVUELO)
        Me.relationFK_CIUD_AERO = New Global.System.Data.DataRelation("FK_CIUD_AERO", New Global.System.Data.DataColumn() {Me.tableCIUDAD.COD_CIUDColumn}, New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_CIUDColumn}, false)
        Me.Relations.Add(Me.relationFK_CIUD_AERO)
        Me.relationFK_LINEA_AVION = New Global.System.Data.DataRelation("FK_LINEA_AVION", New Global.System.Data.DataColumn() {Me.tableLINEA.COD_LINEColumn}, New Global.System.Data.DataColumn() {Me.tableAVION.COD_LINEColumn}, false)
        Me.Relations.Add(Me.relationFK_LINEA_AVION)
        Me.relationFK_CLIE_BOLET = New Global.System.Data.DataRelation("FK_CLIE_BOLET", New Global.System.Data.DataColumn() {Me.tableCLIENTE.COD_CLIEColumn}, New Global.System.Data.DataColumn() {Me.tableBOLETO.COD_CLIEColumn}, false)
        Me.Relations.Add(Me.relationFK_CLIE_BOLET)
        Me.relationFK_DEST_BOLET = New Global.System.Data.DataRelation("FK_DEST_BOLET", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableBOLETO.DESTINOColumn}, false)
        Me.Relations.Add(Me.relationFK_DEST_BOLET)
        Me.relationFK_SALIDA_BOLET = New Global.System.Data.DataRelation("FK_SALIDA_BOLET", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableBOLETO.ORIGENColumn}, false)
        Me.Relations.Add(Me.relationFK_SALIDA_BOLET)
        Me.relationFK_VUEL_BOLET = New Global.System.Data.DataRelation("FK_VUEL_BOLET", New Global.System.Data.DataColumn() {Me.tableVUELO.COD_VUELColumn}, New Global.System.Data.DataColumn() {Me.tableBOLETO.COD_VUELColumn}, false)
        Me.Relations.Add(Me.relationFK_VUEL_BOLET)
        Me.relationFK_PAIS_CIUD = New Global.System.Data.DataRelation("FK_PAIS_CIUD", New Global.System.Data.DataColumn() {Me.tablePAIS.COD_PAColumn}, New Global.System.Data.DataColumn() {Me.tableCIUDAD.COD_PAColumn}, false)
        Me.Relations.Add(Me.relationFK_PAIS_CIUD)
        Me.relationFK_CLIENTE_USUARIO_1 = New Global.System.Data.DataRelation("FK_CLIENTE_USUARIO_1", New Global.System.Data.DataColumn() {Me.tableUSUARIO.COD_USUARIOColumn}, New Global.System.Data.DataColumn() {Me.tableCLIENTE.COD_USUARIOColumn}, false)
        Me.Relations.Add(Me.relationFK_CLIENTE_USUARIO_1)
        Me.relationFK_AERO_DESTINO = New Global.System.Data.DataRelation("FK_AERO_DESTINO", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableESCALA.DESTINOColumn}, false)
        Me.Relations.Add(Me.relationFK_AERO_DESTINO)
        Me.relationFK_AERO_ESCALA = New Global.System.Data.DataRelation("FK_AERO_ESCALA", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableESCALA.AEROPUERTOColumn}, false)
        Me.Relations.Add(Me.relationFK_AERO_ESCALA)
        Me.relationFK_AERO_ORIGEN = New Global.System.Data.DataRelation("FK_AERO_ORIGEN", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableESCALA.ORIGENColumn}, false)
        Me.Relations.Add(Me.relationFK_AERO_ORIGEN)
        Me.relationFK_LINEA_PERSONAL = New Global.System.Data.DataRelation("FK_LINEA_PERSONAL", New Global.System.Data.DataColumn() {Me.tableLINEA.COD_LINEColumn}, New Global.System.Data.DataColumn() {Me.tablePERSONAL.COD_LINEColumn}, false)
        Me.Relations.Add(Me.relationFK_LINEA_PERSONAL)
        Me.relationFK_PERSONAL_USUARIO_1 = New Global.System.Data.DataRelation("FK_PERSONAL_USUARIO_1", New Global.System.Data.DataColumn() {Me.tableUSUARIO.COD_USUARIOColumn}, New Global.System.Data.DataColumn() {Me.tablePERSONAL.COD_USUARIOColumn}, false)
        Me.Relations.Add(Me.relationFK_PERSONAL_USUARIO_1)
        Me.relationFK_PROFESI_PERSON = New Global.System.Data.DataRelation("FK_PROFESI_PERSON", New Global.System.Data.DataColumn() {Me.tablePROFESION.COD_PROColumn}, New Global.System.Data.DataColumn() {Me.tablePERSONAL.COD_PROColumn}, false)
        Me.Relations.Add(Me.relationFK_PROFESI_PERSON)
        Me.relationFK_PERSONA_TURNO = New Global.System.Data.DataRelation("FK_PERSONA_TURNO", New Global.System.Data.DataColumn() {Me.tablePERSONAL.COD_PERSOColumn}, New Global.System.Data.DataColumn() {Me.tableTURNO.COD_PERSOColumn}, false)
        Me.Relations.Add(Me.relationFK_PERSONA_TURNO)
        Me.relationFK_VUELO_TURN = New Global.System.Data.DataRelation("FK_VUELO_TURN", New Global.System.Data.DataColumn() {Me.tableVUELO.COD_VUELColumn}, New Global.System.Data.DataColumn() {Me.tableTURNO.COD_VUELColumn}, false)
        Me.Relations.Add(Me.relationFK_VUELO_TURN)
        Me.relationFK_AERO_ATERR = New Global.System.Data.DataRelation("FK_AERO_ATERR", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableVUELO.ATERRISAJEColumn}, false)
        Me.Relations.Add(Me.relationFK_AERO_ATERR)
        Me.relationFK_AERO_DESP = New Global.System.Data.DataRelation("FK_AERO_DESP", New Global.System.Data.DataColumn() {Me.tableAEROPUERTO.COD_AEROColumn}, New Global.System.Data.DataColumn() {Me.tableVUELO.DESPUEGUEColumn}, false)
        Me.Relations.Add(Me.relationFK_AERO_DESP)
        Me.relationFK_AVIO_VUEL = New Global.System.Data.DataRelation("FK_AVIO_VUEL", New Global.System.Data.DataColumn() {Me.tableAVION.COD_AVIOColumn}, New Global.System.Data.DataColumn() {Me.tableVUELO.COD_AVIOColumn}, false)
        Me.Relations.Add(Me.relationFK_AVIO_VUEL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAEROPUERTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAVION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeBOLETO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCIUDAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCLIENTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeESCALA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeLINEA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePAIS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePERSONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePROFESION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTURNO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUSUARIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeVUELO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds = New Ds()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AEROPUERTORowChangeEventHandler(ByVal sender As Object, ByVal e As AEROPUERTORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AVIONRowChangeEventHandler(ByVal sender As Object, ByVal e As AVIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub BOLETORowChangeEventHandler(ByVal sender As Object, ByVal e As BOLETORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CIUDADRowChangeEventHandler(ByVal sender As Object, ByVal e As CIUDADRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CLIENTERowChangeEventHandler(ByVal sender As Object, ByVal e As CLIENTERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ESCALARowChangeEventHandler(ByVal sender As Object, ByVal e As ESCALARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub LINEARowChangeEventHandler(ByVal sender As Object, ByVal e As LINEARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PAISRowChangeEventHandler(ByVal sender As Object, ByVal e As PAISRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PERSONALRowChangeEventHandler(ByVal sender As Object, ByVal e As PERSONALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PROFESIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PROFESIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TURNORowChangeEventHandler(ByVal sender As Object, ByVal e As TURNORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub USUARIORowChangeEventHandler(ByVal sender As Object, ByVal e As USUARIORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub VUELORowChangeEventHandler(ByVal sender As Object, ByVal e As VUELORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AEROPUERTODataTable
        Inherits Global.System.Data.TypedTableBase(Of AEROPUERTORow)
        
        Private columnCOD_AERO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnCOD_CIUD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AEROPUERTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_AEROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AERO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_CIUDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CIUD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AEROPUERTORow
            Get
                Return CType(Me.Rows(index),AEROPUERTORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AEROPUERTORowChanging As AEROPUERTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AEROPUERTORowChanged As AEROPUERTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AEROPUERTORowDeleting As AEROPUERTORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AEROPUERTORowDeleted As AEROPUERTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAEROPUERTORow(ByVal row As AEROPUERTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAEROPUERTORow(ByVal COD_AERO As Decimal, ByVal NOMBRE As String, ByVal parentCIUDADRowByFK_CIUD_AERO As CIUDADRow) As AEROPUERTORow
            Dim rowAEROPUERTORow As AEROPUERTORow = CType(Me.NewRow,AEROPUERTORow)
            Dim columnValuesArray() As Object = New Object() {COD_AERO, NOMBRE, Nothing}
            If (Not (parentCIUDADRowByFK_CIUD_AERO) Is Nothing) Then
                columnValuesArray(2) = parentCIUDADRowByFK_CIUD_AERO(0)
            End If
            rowAEROPUERTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAEROPUERTORow)
            Return rowAEROPUERTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_AERO(ByVal COD_AERO As Decimal) As AEROPUERTORow
            Return CType(Me.Rows.Find(New Object() {COD_AERO}),AEROPUERTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AEROPUERTODataTable = CType(MyBase.Clone,AEROPUERTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AEROPUERTODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_AERO = MyBase.Columns("COD_AERO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnCOD_CIUD = MyBase.Columns("COD_CIUD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_AERO = New Global.System.Data.DataColumn("COD_AERO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AERO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnCOD_CIUD = New Global.System.Data.DataColumn("COD_CIUD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CIUD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_AERO}, true))
            Me.columnCOD_AERO.AllowDBNull = false
            Me.columnCOD_AERO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnCOD_CIUD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAEROPUERTORow() As AEROPUERTORow
            Return CType(Me.NewRow,AEROPUERTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AEROPUERTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AEROPUERTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AEROPUERTORowChangedEvent) Is Nothing) Then
                RaiseEvent AEROPUERTORowChanged(Me, New AEROPUERTORowChangeEvent(CType(e.Row,AEROPUERTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AEROPUERTORowChangingEvent) Is Nothing) Then
                RaiseEvent AEROPUERTORowChanging(Me, New AEROPUERTORowChangeEvent(CType(e.Row,AEROPUERTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AEROPUERTORowDeletedEvent) Is Nothing) Then
                RaiseEvent AEROPUERTORowDeleted(Me, New AEROPUERTORowChangeEvent(CType(e.Row,AEROPUERTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AEROPUERTORowDeletingEvent) Is Nothing) Then
                RaiseEvent AEROPUERTORowDeleting(Me, New AEROPUERTORowChangeEvent(CType(e.Row,AEROPUERTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAEROPUERTORow(ByVal row As AEROPUERTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AEROPUERTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AVIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of AVIONRow)
        
        Private columnCOD_AVIO As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnCAPACIDAD As Global.System.Data.DataColumn
        
        Private columnCOD_LINE As Global.System.Data.DataColumn
        
        Private columnTIERRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AVION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_AVIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AVIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CAPACIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAPACIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIERRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIERRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AVIONRow
            Get
                Return CType(Me.Rows(index),AVIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AVIONRowChanging As AVIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AVIONRowChanged As AVIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AVIONRowDeleting As AVIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AVIONRowDeleted As AVIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAVIONRow(ByVal row As AVIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAVIONRow(ByVal COD_AVIO As Decimal, ByVal MODELO As String, ByVal CAPACIDAD As Decimal, ByVal parentLINEARowByFK_LINEA_AVION As LINEARow, ByVal TIERRA As String) As AVIONRow
            Dim rowAVIONRow As AVIONRow = CType(Me.NewRow,AVIONRow)
            Dim columnValuesArray() As Object = New Object() {COD_AVIO, MODELO, CAPACIDAD, Nothing, TIERRA}
            If (Not (parentLINEARowByFK_LINEA_AVION) Is Nothing) Then
                columnValuesArray(3) = parentLINEARowByFK_LINEA_AVION(0)
            End If
            rowAVIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAVIONRow)
            Return rowAVIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_AVIO(ByVal COD_AVIO As Decimal) As AVIONRow
            Return CType(Me.Rows.Find(New Object() {COD_AVIO}),AVIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AVIONDataTable = CType(MyBase.Clone,AVIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AVIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_AVIO = MyBase.Columns("COD_AVIO")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnCAPACIDAD = MyBase.Columns("CAPACIDAD")
            Me.columnCOD_LINE = MyBase.Columns("COD_LINE")
            Me.columnTIERRA = MyBase.Columns("TIERRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_AVIO = New Global.System.Data.DataColumn("COD_AVIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AVIO)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnCAPACIDAD = New Global.System.Data.DataColumn("CAPACIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAPACIDAD)
            Me.columnCOD_LINE = New Global.System.Data.DataColumn("COD_LINE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_LINE)
            Me.columnTIERRA = New Global.System.Data.DataColumn("TIERRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIERRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_AVIO}, true))
            Me.columnCOD_AVIO.AllowDBNull = false
            Me.columnCOD_AVIO.Unique = true
            Me.columnMODELO.AllowDBNull = false
            Me.columnMODELO.MaxLength = 100
            Me.columnCAPACIDAD.AllowDBNull = false
            Me.columnCOD_LINE.AllowDBNull = false
            Me.columnTIERRA.AllowDBNull = false
            Me.columnTIERRA.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAVIONRow() As AVIONRow
            Return CType(Me.NewRow,AVIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AVIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AVIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AVIONRowChangedEvent) Is Nothing) Then
                RaiseEvent AVIONRowChanged(Me, New AVIONRowChangeEvent(CType(e.Row,AVIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AVIONRowChangingEvent) Is Nothing) Then
                RaiseEvent AVIONRowChanging(Me, New AVIONRowChangeEvent(CType(e.Row,AVIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AVIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent AVIONRowDeleted(Me, New AVIONRowChangeEvent(CType(e.Row,AVIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AVIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent AVIONRowDeleting(Me, New AVIONRowChangeEvent(CType(e.Row,AVIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAVIONRow(ByVal row As AVIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AVIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BOLETODataTable
        Inherits Global.System.Data.TypedTableBase(Of BOLETORow)
        
        Private columnCOD_BO As Global.System.Data.DataColumn
        
        Private columnCOD_CLIE As Global.System.Data.DataColumn
        
        Private columnCOD_VUEL As Global.System.Data.DataColumn
        
        Private columnFECHA_COMPRA As Global.System.Data.DataColumn
        
        Private columnORIGEN As Global.System.Data.DataColumn
        
        Private columnDESTINO As Global.System.Data.DataColumn
        
        Private columnVALIDO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BOLETO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_BOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_BO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_CLIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CLIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_VUELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_VUEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHA_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORIGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORIGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESTINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESTINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VALIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOLETORow
            Get
                Return CType(Me.Rows(index),BOLETORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BOLETORowChanging As BOLETORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BOLETORowChanged As BOLETORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BOLETORowDeleting As BOLETORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BOLETORowDeleted As BOLETORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddBOLETORow(ByVal row As BOLETORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddBOLETORow(ByVal COD_BO As Decimal, ByVal parentCLIENTERowByFK_CLIE_BOLET As CLIENTERow, ByVal parentVUELORowByFK_VUEL_BOLET As VUELORow, ByVal FECHA_COMPRA As Date, ByVal parentAEROPUERTORowByFK_SALIDA_BOLET As AEROPUERTORow, ByVal parentAEROPUERTORowByFK_DEST_BOLET As AEROPUERTORow, ByVal VALIDO As String) As BOLETORow
            Dim rowBOLETORow As BOLETORow = CType(Me.NewRow,BOLETORow)
            Dim columnValuesArray() As Object = New Object() {COD_BO, Nothing, Nothing, FECHA_COMPRA, Nothing, Nothing, VALIDO}
            If (Not (parentCLIENTERowByFK_CLIE_BOLET) Is Nothing) Then
                columnValuesArray(1) = parentCLIENTERowByFK_CLIE_BOLET(0)
            End If
            If (Not (parentVUELORowByFK_VUEL_BOLET) Is Nothing) Then
                columnValuesArray(2) = parentVUELORowByFK_VUEL_BOLET(0)
            End If
            If (Not (parentAEROPUERTORowByFK_SALIDA_BOLET) Is Nothing) Then
                columnValuesArray(4) = parentAEROPUERTORowByFK_SALIDA_BOLET(0)
            End If
            If (Not (parentAEROPUERTORowByFK_DEST_BOLET) Is Nothing) Then
                columnValuesArray(5) = parentAEROPUERTORowByFK_DEST_BOLET(0)
            End If
            rowBOLETORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBOLETORow)
            Return rowBOLETORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_BO(ByVal COD_BO As Decimal) As BOLETORow
            Return CType(Me.Rows.Find(New Object() {COD_BO}),BOLETORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BOLETODataTable = CType(MyBase.Clone,BOLETODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BOLETODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_BO = MyBase.Columns("COD_BO")
            Me.columnCOD_CLIE = MyBase.Columns("COD_CLIE")
            Me.columnCOD_VUEL = MyBase.Columns("COD_VUEL")
            Me.columnFECHA_COMPRA = MyBase.Columns("FECHA_COMPRA")
            Me.columnORIGEN = MyBase.Columns("ORIGEN")
            Me.columnDESTINO = MyBase.Columns("DESTINO")
            Me.columnVALIDO = MyBase.Columns("VALIDO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_BO = New Global.System.Data.DataColumn("COD_BO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BO)
            Me.columnCOD_CLIE = New Global.System.Data.DataColumn("COD_CLIE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CLIE)
            Me.columnCOD_VUEL = New Global.System.Data.DataColumn("COD_VUEL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_VUEL)
            Me.columnFECHA_COMPRA = New Global.System.Data.DataColumn("FECHA_COMPRA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMPRA)
            Me.columnORIGEN = New Global.System.Data.DataColumn("ORIGEN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORIGEN)
            Me.columnDESTINO = New Global.System.Data.DataColumn("DESTINO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESTINO)
            Me.columnVALIDO = New Global.System.Data.DataColumn("VALIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALIDO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_BO}, true))
            Me.columnCOD_BO.AllowDBNull = false
            Me.columnCOD_BO.Unique = true
            Me.columnCOD_CLIE.AllowDBNull = false
            Me.columnCOD_VUEL.AllowDBNull = false
            Me.columnFECHA_COMPRA.AllowDBNull = false
            Me.columnORIGEN.AllowDBNull = false
            Me.columnDESTINO.AllowDBNull = false
            Me.columnVALIDO.AllowDBNull = false
            Me.columnVALIDO.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewBOLETORow() As BOLETORow
            Return CType(Me.NewRow,BOLETORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BOLETORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BOLETORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOLETORowChangedEvent) Is Nothing) Then
                RaiseEvent BOLETORowChanged(Me, New BOLETORowChangeEvent(CType(e.Row,BOLETORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOLETORowChangingEvent) Is Nothing) Then
                RaiseEvent BOLETORowChanging(Me, New BOLETORowChangeEvent(CType(e.Row,BOLETORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOLETORowDeletedEvent) Is Nothing) Then
                RaiseEvent BOLETORowDeleted(Me, New BOLETORowChangeEvent(CType(e.Row,BOLETORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOLETORowDeletingEvent) Is Nothing) Then
                RaiseEvent BOLETORowDeleting(Me, New BOLETORowChangeEvent(CType(e.Row,BOLETORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveBOLETORow(ByVal row As BOLETORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BOLETODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CIUDADDataTable
        Inherits Global.System.Data.TypedTableBase(Of CIUDADRow)
        
        Private columnCOD_CIUD As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnCOD_PA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CIUDAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_CIUDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CIUD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_PAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CIUDADRow
            Get
                Return CType(Me.Rows(index),CIUDADRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CIUDADRowChanging As CIUDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CIUDADRowChanged As CIUDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CIUDADRowDeleting As CIUDADRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CIUDADRowDeleted As CIUDADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCIUDADRow(ByVal row As CIUDADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCIUDADRow(ByVal COD_CIUD As Decimal, ByVal NOMBRE As String, ByVal parentPAISRowByFK_PAIS_CIUD As PAISRow) As CIUDADRow
            Dim rowCIUDADRow As CIUDADRow = CType(Me.NewRow,CIUDADRow)
            Dim columnValuesArray() As Object = New Object() {COD_CIUD, NOMBRE, Nothing}
            If (Not (parentPAISRowByFK_PAIS_CIUD) Is Nothing) Then
                columnValuesArray(2) = parentPAISRowByFK_PAIS_CIUD(0)
            End If
            rowCIUDADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCIUDADRow)
            Return rowCIUDADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_CIUD(ByVal COD_CIUD As Decimal) As CIUDADRow
            Return CType(Me.Rows.Find(New Object() {COD_CIUD}),CIUDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CIUDADDataTable = CType(MyBase.Clone,CIUDADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CIUDADDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_CIUD = MyBase.Columns("COD_CIUD")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnCOD_PA = MyBase.Columns("COD_PA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_CIUD = New Global.System.Data.DataColumn("COD_CIUD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CIUD)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnCOD_PA = New Global.System.Data.DataColumn("COD_PA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_CIUD}, true))
            Me.columnCOD_CIUD.AllowDBNull = false
            Me.columnCOD_CIUD.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnCOD_PA.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCIUDADRow() As CIUDADRow
            Return CType(Me.NewRow,CIUDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CIUDADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CIUDADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CIUDADRowChangedEvent) Is Nothing) Then
                RaiseEvent CIUDADRowChanged(Me, New CIUDADRowChangeEvent(CType(e.Row,CIUDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CIUDADRowChangingEvent) Is Nothing) Then
                RaiseEvent CIUDADRowChanging(Me, New CIUDADRowChangeEvent(CType(e.Row,CIUDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CIUDADRowDeletedEvent) Is Nothing) Then
                RaiseEvent CIUDADRowDeleted(Me, New CIUDADRowChangeEvent(CType(e.Row,CIUDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CIUDADRowDeletingEvent) Is Nothing) Then
                RaiseEvent CIUDADRowDeleting(Me, New CIUDADRowChangeEvent(CType(e.Row,CIUDADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCIUDADRow(ByVal row As CIUDADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CIUDADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CLIENTEDataTable
        Inherits Global.System.Data.TypedTableBase(Of CLIENTERow)
        
        Private columnCOD_CLIE As Global.System.Data.DataColumn
        
        Private columnDPI As Global.System.Data.DataColumn
        
        Private columnPASAPORTE As Global.System.Data.DataColumn
        
        Private columnNACIONALIDAD As Global.System.Data.DataColumn
        
        Private columnFECHA_NACIMIENTO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnAPELLIDO As Global.System.Data.DataColumn
        
        Private columnCOD_USUARIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CLIENTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_CLIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CLIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DPIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PASAPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASAPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NACIONALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNACIONALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHA_NACIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_NACIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property APELLIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPELLIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CLIENTERow
            Get
                Return CType(Me.Rows(index),CLIENTERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CLIENTERowChanging As CLIENTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CLIENTERowChanged As CLIENTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CLIENTERowDeleting As CLIENTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CLIENTERowDeleted As CLIENTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCLIENTERow(ByVal row As CLIENTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCLIENTERow(ByVal COD_CLIE As Decimal, ByVal DPI As String, ByVal PASAPORTE As String, ByVal NACIONALIDAD As String, ByVal FECHA_NACIMIENTO As Date, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal parentUSUARIORowByFK_CLIENTE_USUARIO_1 As USUARIORow) As CLIENTERow
            Dim rowCLIENTERow As CLIENTERow = CType(Me.NewRow,CLIENTERow)
            Dim columnValuesArray() As Object = New Object() {COD_CLIE, DPI, PASAPORTE, NACIONALIDAD, FECHA_NACIMIENTO, NOMBRE, APELLIDO, Nothing}
            If (Not (parentUSUARIORowByFK_CLIENTE_USUARIO_1) Is Nothing) Then
                columnValuesArray(7) = parentUSUARIORowByFK_CLIENTE_USUARIO_1(0)
            End If
            rowCLIENTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCLIENTERow)
            Return rowCLIENTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_CLIE(ByVal COD_CLIE As Decimal) As CLIENTERow
            Return CType(Me.Rows.Find(New Object() {COD_CLIE}),CLIENTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CLIENTEDataTable = CType(MyBase.Clone,CLIENTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CLIENTEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_CLIE = MyBase.Columns("COD_CLIE")
            Me.columnDPI = MyBase.Columns("DPI")
            Me.columnPASAPORTE = MyBase.Columns("PASAPORTE")
            Me.columnNACIONALIDAD = MyBase.Columns("NACIONALIDAD")
            Me.columnFECHA_NACIMIENTO = MyBase.Columns("FECHA_NACIMIENTO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnAPELLIDO = MyBase.Columns("APELLIDO")
            Me.columnCOD_USUARIO = MyBase.Columns("COD_USUARIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_CLIE = New Global.System.Data.DataColumn("COD_CLIE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CLIE)
            Me.columnDPI = New Global.System.Data.DataColumn("DPI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPI)
            Me.columnPASAPORTE = New Global.System.Data.DataColumn("PASAPORTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASAPORTE)
            Me.columnNACIONALIDAD = New Global.System.Data.DataColumn("NACIONALIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNACIONALIDAD)
            Me.columnFECHA_NACIMIENTO = New Global.System.Data.DataColumn("FECHA_NACIMIENTO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_NACIMIENTO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnAPELLIDO = New Global.System.Data.DataColumn("APELLIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDO)
            Me.columnCOD_USUARIO = New Global.System.Data.DataColumn("COD_USUARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_USUARIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_CLIE}, true))
            Me.columnCOD_CLIE.AllowDBNull = false
            Me.columnCOD_CLIE.Unique = true
            Me.columnDPI.AllowDBNull = false
            Me.columnDPI.MaxLength = 50
            Me.columnPASAPORTE.AllowDBNull = false
            Me.columnPASAPORTE.MaxLength = 50
            Me.columnNACIONALIDAD.AllowDBNull = false
            Me.columnNACIONALIDAD.MaxLength = 100
            Me.columnFECHA_NACIMIENTO.AllowDBNull = false
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnAPELLIDO.AllowDBNull = false
            Me.columnAPELLIDO.MaxLength = 100
            Me.columnCOD_USUARIO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCLIENTERow() As CLIENTERow
            Return CType(Me.NewRow,CLIENTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CLIENTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CLIENTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CLIENTERowChangedEvent) Is Nothing) Then
                RaiseEvent CLIENTERowChanged(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CLIENTERowChangingEvent) Is Nothing) Then
                RaiseEvent CLIENTERowChanging(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CLIENTERowDeletedEvent) Is Nothing) Then
                RaiseEvent CLIENTERowDeleted(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CLIENTERowDeletingEvent) Is Nothing) Then
                RaiseEvent CLIENTERowDeleting(Me, New CLIENTERowChangeEvent(CType(e.Row,CLIENTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCLIENTERow(ByVal row As CLIENTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CLIENTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ESCALADataTable
        Inherits Global.System.Data.TypedTableBase(Of ESCALARow)
        
        Private columnCOD_VUEL As Global.System.Data.DataColumn
        
        Private columnAEROPUERTO As Global.System.Data.DataColumn
        
        Private columnORIGEN As Global.System.Data.DataColumn
        
        Private columnDESTINO As Global.System.Data.DataColumn
        
        Private columnFECHA_ORIGEN As Global.System.Data.DataColumn
        
        Private columnFECHA_DESTINO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ESCALA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_VUELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_VUEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AEROPUERTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAEROPUERTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORIGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORIGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESTINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESTINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHA_ORIGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ORIGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHA_DESTINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DESTINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ESCALARow
            Get
                Return CType(Me.Rows(index),ESCALARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ESCALARowChanging As ESCALARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ESCALARowChanged As ESCALARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ESCALARowDeleting As ESCALARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ESCALARowDeleted As ESCALARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddESCALARow(ByVal row As ESCALARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddESCALARow(ByVal COD_VUEL As Decimal, ByVal parentAEROPUERTORowByFK_AERO_ESCALA As AEROPUERTORow, ByVal parentAEROPUERTORowByFK_AERO_ORIGEN As AEROPUERTORow, ByVal parentAEROPUERTORowByFK_AERO_DESTINO As AEROPUERTORow, ByVal FECHA_ORIGEN As Date, ByVal FECHA_DESTINO As Date) As ESCALARow
            Dim rowESCALARow As ESCALARow = CType(Me.NewRow,ESCALARow)
            Dim columnValuesArray() As Object = New Object() {COD_VUEL, Nothing, Nothing, Nothing, FECHA_ORIGEN, FECHA_DESTINO}
            If (Not (parentAEROPUERTORowByFK_AERO_ESCALA) Is Nothing) Then
                columnValuesArray(1) = parentAEROPUERTORowByFK_AERO_ESCALA(0)
            End If
            If (Not (parentAEROPUERTORowByFK_AERO_ORIGEN) Is Nothing) Then
                columnValuesArray(2) = parentAEROPUERTORowByFK_AERO_ORIGEN(0)
            End If
            If (Not (parentAEROPUERTORowByFK_AERO_DESTINO) Is Nothing) Then
                columnValuesArray(3) = parentAEROPUERTORowByFK_AERO_DESTINO(0)
            End If
            rowESCALARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowESCALARow)
            Return rowESCALARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ESCALADataTable = CType(MyBase.Clone,ESCALADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ESCALADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_VUEL = MyBase.Columns("COD_VUEL")
            Me.columnAEROPUERTO = MyBase.Columns("AEROPUERTO")
            Me.columnORIGEN = MyBase.Columns("ORIGEN")
            Me.columnDESTINO = MyBase.Columns("DESTINO")
            Me.columnFECHA_ORIGEN = MyBase.Columns("FECHA_ORIGEN")
            Me.columnFECHA_DESTINO = MyBase.Columns("FECHA_DESTINO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_VUEL = New Global.System.Data.DataColumn("COD_VUEL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_VUEL)
            Me.columnAEROPUERTO = New Global.System.Data.DataColumn("AEROPUERTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAEROPUERTO)
            Me.columnORIGEN = New Global.System.Data.DataColumn("ORIGEN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORIGEN)
            Me.columnDESTINO = New Global.System.Data.DataColumn("DESTINO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESTINO)
            Me.columnFECHA_ORIGEN = New Global.System.Data.DataColumn("FECHA_ORIGEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ORIGEN)
            Me.columnFECHA_DESTINO = New Global.System.Data.DataColumn("FECHA_DESTINO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DESTINO)
            Me.columnCOD_VUEL.AllowDBNull = false
            Me.columnAEROPUERTO.AllowDBNull = false
            Me.columnORIGEN.AllowDBNull = false
            Me.columnDESTINO.AllowDBNull = false
            Me.columnFECHA_ORIGEN.AllowDBNull = false
            Me.columnFECHA_DESTINO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewESCALARow() As ESCALARow
            Return CType(Me.NewRow,ESCALARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ESCALARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ESCALARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ESCALARowChangedEvent) Is Nothing) Then
                RaiseEvent ESCALARowChanged(Me, New ESCALARowChangeEvent(CType(e.Row,ESCALARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ESCALARowChangingEvent) Is Nothing) Then
                RaiseEvent ESCALARowChanging(Me, New ESCALARowChangeEvent(CType(e.Row,ESCALARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ESCALARowDeletedEvent) Is Nothing) Then
                RaiseEvent ESCALARowDeleted(Me, New ESCALARowChangeEvent(CType(e.Row,ESCALARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ESCALARowDeletingEvent) Is Nothing) Then
                RaiseEvent ESCALARowDeleting(Me, New ESCALARowChangeEvent(CType(e.Row,ESCALARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveESCALARow(ByVal row As ESCALARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ESCALADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LINEADataTable
        Inherits Global.System.Data.TypedTableBase(Of LINEARow)
        
        Private columnCOD_LINE As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnCOD_USUARIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LINEA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LINEARow
            Get
                Return CType(Me.Rows(index),LINEARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINEARowChanging As LINEARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINEARowChanged As LINEARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINEARowDeleting As LINEARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LINEARowDeleted As LINEARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddLINEARow(ByVal row As LINEARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddLINEARow(ByVal COD_LINE As Decimal, ByVal NOMBRE As String, ByVal COD_USUARIO As Decimal) As LINEARow
            Dim rowLINEARow As LINEARow = CType(Me.NewRow,LINEARow)
            Dim columnValuesArray() As Object = New Object() {COD_LINE, NOMBRE, COD_USUARIO}
            rowLINEARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLINEARow)
            Return rowLINEARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_LINE(ByVal COD_LINE As Decimal) As LINEARow
            Return CType(Me.Rows.Find(New Object() {COD_LINE}),LINEARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LINEADataTable = CType(MyBase.Clone,LINEADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LINEADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_LINE = MyBase.Columns("COD_LINE")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnCOD_USUARIO = MyBase.Columns("COD_USUARIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_LINE = New Global.System.Data.DataColumn("COD_LINE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_LINE)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnCOD_USUARIO = New Global.System.Data.DataColumn("COD_USUARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_USUARIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_LINE}, true))
            Me.columnCOD_LINE.AllowDBNull = false
            Me.columnCOD_LINE.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnCOD_USUARIO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewLINEARow() As LINEARow
            Return CType(Me.NewRow,LINEARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LINEARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LINEARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LINEARowChangedEvent) Is Nothing) Then
                RaiseEvent LINEARowChanged(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LINEARowChangingEvent) Is Nothing) Then
                RaiseEvent LINEARowChanging(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LINEARowDeletedEvent) Is Nothing) Then
                RaiseEvent LINEARowDeleted(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LINEARowDeletingEvent) Is Nothing) Then
                RaiseEvent LINEARowDeleting(Me, New LINEARowChangeEvent(CType(e.Row,LINEARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveLINEARow(ByVal row As LINEARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LINEADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PAISDataTable
        Inherits Global.System.Data.TypedTableBase(Of PAISRow)
        
        Private columnCOD_PA As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PAIS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_PAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAISRow
            Get
                Return CType(Me.Rows(index),PAISRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PAISRowChanging As PAISRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PAISRowChanged As PAISRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PAISRowDeleting As PAISRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PAISRowDeleted As PAISRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPAISRow(ByVal row As PAISRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPAISRow(ByVal COD_PA As Decimal, ByVal NOMBRE As String) As PAISRow
            Dim rowPAISRow As PAISRow = CType(Me.NewRow,PAISRow)
            Dim columnValuesArray() As Object = New Object() {COD_PA, NOMBRE}
            rowPAISRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPAISRow)
            Return rowPAISRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_PA(ByVal COD_PA As Decimal) As PAISRow
            Return CType(Me.Rows.Find(New Object() {COD_PA}),PAISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PAISDataTable = CType(MyBase.Clone,PAISDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PAISDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_PA = MyBase.Columns("COD_PA")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_PA = New Global.System.Data.DataColumn("COD_PA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PA)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_PA}, true))
            Me.columnCOD_PA.AllowDBNull = false
            Me.columnCOD_PA.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPAISRow() As PAISRow
            Return CType(Me.NewRow,PAISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PAISRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PAISRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAISRowChangedEvent) Is Nothing) Then
                RaiseEvent PAISRowChanged(Me, New PAISRowChangeEvent(CType(e.Row,PAISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAISRowChangingEvent) Is Nothing) Then
                RaiseEvent PAISRowChanging(Me, New PAISRowChangeEvent(CType(e.Row,PAISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAISRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAISRowDeleted(Me, New PAISRowChangeEvent(CType(e.Row,PAISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAISRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAISRowDeleting(Me, New PAISRowChangeEvent(CType(e.Row,PAISRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePAISRow(ByVal row As PAISRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PAISDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERSONALDataTable
        Inherits Global.System.Data.TypedTableBase(Of PERSONALRow)
        
        Private columnCOD_PERSO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnAPELLIDO As Global.System.Data.DataColumn
        
        Private columnNACIONALIDAD As Global.System.Data.DataColumn
        
        Private columnCOD_PRO As Global.System.Data.DataColumn
        
        Private columnCOD_LINE As Global.System.Data.DataColumn
        
        Private columnCOD_USUARIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERSONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_PERSOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PERSO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property APELLIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPELLIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NACIONALIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNACIONALIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_PROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERSONALRow
            Get
                Return CType(Me.Rows(index),PERSONALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERSONALRowChanging As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERSONALRowChanged As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERSONALRowDeleting As PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERSONALRowDeleted As PERSONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPERSONALRow(ByVal COD_PERSO As Decimal, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal NACIONALIDAD As Decimal, ByVal parentPROFESIONRowByFK_PROFESI_PERSON As PROFESIONRow, ByVal parentLINEARowByFK_LINEA_PERSONAL As LINEARow, ByVal parentUSUARIORowByFK_PERSONAL_USUARIO_1 As USUARIORow) As PERSONALRow
            Dim rowPERSONALRow As PERSONALRow = CType(Me.NewRow,PERSONALRow)
            Dim columnValuesArray() As Object = New Object() {COD_PERSO, NOMBRE, APELLIDO, NACIONALIDAD, Nothing, Nothing, Nothing}
            If (Not (parentPROFESIONRowByFK_PROFESI_PERSON) Is Nothing) Then
                columnValuesArray(4) = parentPROFESIONRowByFK_PROFESI_PERSON(0)
            End If
            If (Not (parentLINEARowByFK_LINEA_PERSONAL) Is Nothing) Then
                columnValuesArray(5) = parentLINEARowByFK_LINEA_PERSONAL(0)
            End If
            If (Not (parentUSUARIORowByFK_PERSONAL_USUARIO_1) Is Nothing) Then
                columnValuesArray(6) = parentUSUARIORowByFK_PERSONAL_USUARIO_1(0)
            End If
            rowPERSONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERSONALRow)
            Return rowPERSONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_PERSO(ByVal COD_PERSO As Decimal) As PERSONALRow
            Return CType(Me.Rows.Find(New Object() {COD_PERSO}),PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERSONALDataTable = CType(MyBase.Clone,PERSONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERSONALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_PERSO = MyBase.Columns("COD_PERSO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnAPELLIDO = MyBase.Columns("APELLIDO")
            Me.columnNACIONALIDAD = MyBase.Columns("NACIONALIDAD")
            Me.columnCOD_PRO = MyBase.Columns("COD_PRO")
            Me.columnCOD_LINE = MyBase.Columns("COD_LINE")
            Me.columnCOD_USUARIO = MyBase.Columns("COD_USUARIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_PERSO = New Global.System.Data.DataColumn("COD_PERSO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PERSO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnAPELLIDO = New Global.System.Data.DataColumn("APELLIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDO)
            Me.columnNACIONALIDAD = New Global.System.Data.DataColumn("NACIONALIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNACIONALIDAD)
            Me.columnCOD_PRO = New Global.System.Data.DataColumn("COD_PRO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PRO)
            Me.columnCOD_LINE = New Global.System.Data.DataColumn("COD_LINE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_LINE)
            Me.columnCOD_USUARIO = New Global.System.Data.DataColumn("COD_USUARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_USUARIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_PERSO}, true))
            Me.columnCOD_PERSO.AllowDBNull = false
            Me.columnCOD_PERSO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnAPELLIDO.AllowDBNull = false
            Me.columnAPELLIDO.MaxLength = 100
            Me.columnNACIONALIDAD.AllowDBNull = false
            Me.columnCOD_PRO.AllowDBNull = false
            Me.columnCOD_LINE.AllowDBNull = false
            Me.columnCOD_USUARIO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPERSONALRow() As PERSONALRow
            Return CType(Me.NewRow,PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERSONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERSONALRowChangedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanged(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERSONALRowChangingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowChanging(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERSONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleted(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERSONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERSONALRowDeleting(Me, New PERSONALRowChangeEvent(CType(e.Row,PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePERSONALRow(ByVal row As PERSONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERSONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROFESIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of PROFESIONRow)
        
        Private columnCOD_PRO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnSUELDO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROFESION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_PROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUELDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUELDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROFESIONRow
            Get
                Return CType(Me.Rows(index),PROFESIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFESIONRowChanging As PROFESIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFESIONRowChanged As PROFESIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFESIONRowDeleting As PROFESIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFESIONRowDeleted As PROFESIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPROFESIONRow(ByVal row As PROFESIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPROFESIONRow(ByVal COD_PRO As Decimal, ByVal NOMBRE As String, ByVal SUELDO As Decimal) As PROFESIONRow
            Dim rowPROFESIONRow As PROFESIONRow = CType(Me.NewRow,PROFESIONRow)
            Dim columnValuesArray() As Object = New Object() {COD_PRO, NOMBRE, SUELDO}
            rowPROFESIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROFESIONRow)
            Return rowPROFESIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_PRO(ByVal COD_PRO As Decimal) As PROFESIONRow
            Return CType(Me.Rows.Find(New Object() {COD_PRO}),PROFESIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROFESIONDataTable = CType(MyBase.Clone,PROFESIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROFESIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_PRO = MyBase.Columns("COD_PRO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnSUELDO = MyBase.Columns("SUELDO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_PRO = New Global.System.Data.DataColumn("COD_PRO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PRO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnSUELDO = New Global.System.Data.DataColumn("SUELDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUELDO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_PRO}, true))
            Me.columnCOD_PRO.AllowDBNull = false
            Me.columnCOD_PRO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnSUELDO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPROFESIONRow() As PROFESIONRow
            Return CType(Me.NewRow,PROFESIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROFESIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROFESIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROFESIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PROFESIONRowChanged(Me, New PROFESIONRowChangeEvent(CType(e.Row,PROFESIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROFESIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PROFESIONRowChanging(Me, New PROFESIONRowChangeEvent(CType(e.Row,PROFESIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROFESIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROFESIONRowDeleted(Me, New PROFESIONRowChangeEvent(CType(e.Row,PROFESIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROFESIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROFESIONRowDeleting(Me, New PROFESIONRowChangeEvent(CType(e.Row,PROFESIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePROFESIONRow(ByVal row As PROFESIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROFESIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TURNODataTable
        Inherits Global.System.Data.TypedTableBase(Of TURNORow)
        
        Private columnCOD_PERSO As Global.System.Data.DataColumn
        
        Private columnCOD_VUEL As Global.System.Data.DataColumn
        
        Private columnHORA_VUELO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TURNO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_PERSOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PERSO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_VUELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_VUEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HORA_VUELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHORA_VUELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TURNORow
            Get
                Return CType(Me.Rows(index),TURNORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TURNORowChanging As TURNORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TURNORowChanged As TURNORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TURNORowDeleting As TURNORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TURNORowDeleted As TURNORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTURNORow(ByVal row As TURNORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTURNORow(ByVal parentPERSONALRowByFK_PERSONA_TURNO As PERSONALRow, ByVal parentVUELORowByFK_VUELO_TURN As VUELORow, ByVal HORA_VUELO As String) As TURNORow
            Dim rowTURNORow As TURNORow = CType(Me.NewRow,TURNORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, HORA_VUELO}
            If (Not (parentPERSONALRowByFK_PERSONA_TURNO) Is Nothing) Then
                columnValuesArray(0) = parentPERSONALRowByFK_PERSONA_TURNO(0)
            End If
            If (Not (parentVUELORowByFK_VUELO_TURN) Is Nothing) Then
                columnValuesArray(1) = parentVUELORowByFK_VUELO_TURN(0)
            End If
            rowTURNORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTURNORow)
            Return rowTURNORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TURNODataTable = CType(MyBase.Clone,TURNODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TURNODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_PERSO = MyBase.Columns("COD_PERSO")
            Me.columnCOD_VUEL = MyBase.Columns("COD_VUEL")
            Me.columnHORA_VUELO = MyBase.Columns("HORA_VUELO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_PERSO = New Global.System.Data.DataColumn("COD_PERSO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PERSO)
            Me.columnCOD_VUEL = New Global.System.Data.DataColumn("COD_VUEL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_VUEL)
            Me.columnHORA_VUELO = New Global.System.Data.DataColumn("HORA_VUELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHORA_VUELO)
            Me.columnCOD_PERSO.AllowDBNull = false
            Me.columnCOD_VUEL.AllowDBNull = false
            Me.columnHORA_VUELO.AllowDBNull = false
            Me.columnHORA_VUELO.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTURNORow() As TURNORow
            Return CType(Me.NewRow,TURNORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TURNORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TURNORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TURNORowChangedEvent) Is Nothing) Then
                RaiseEvent TURNORowChanged(Me, New TURNORowChangeEvent(CType(e.Row,TURNORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TURNORowChangingEvent) Is Nothing) Then
                RaiseEvent TURNORowChanging(Me, New TURNORowChangeEvent(CType(e.Row,TURNORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TURNORowDeletedEvent) Is Nothing) Then
                RaiseEvent TURNORowDeleted(Me, New TURNORowChangeEvent(CType(e.Row,TURNORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TURNORowDeletingEvent) Is Nothing) Then
                RaiseEvent TURNORowDeleting(Me, New TURNORowChangeEvent(CType(e.Row,TURNORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTURNORow(ByVal row As TURNORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TURNODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class USUARIODataTable
        Inherits Global.System.Data.TypedTableBase(Of USUARIORow)
        
        Private columnCOD_USUARIO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnPASS As Global.System.Data.DataColumn
        
        Private columnADMIN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "USUARIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ADMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As USUARIORow
            Get
                Return CType(Me.Rows(index),USUARIORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USUARIORowChanging As USUARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USUARIORowChanged As USUARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USUARIORowDeleting As USUARIORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USUARIORowDeleted As USUARIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUSUARIORow(ByVal row As USUARIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUSUARIORow(ByVal COD_USUARIO As Decimal, ByVal NOMBRE As String, ByVal PASS As String, ByVal ADMIN As Decimal) As USUARIORow
            Dim rowUSUARIORow As USUARIORow = CType(Me.NewRow,USUARIORow)
            Dim columnValuesArray() As Object = New Object() {COD_USUARIO, NOMBRE, PASS, ADMIN}
            rowUSUARIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUSUARIORow)
            Return rowUSUARIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_USUARIO(ByVal COD_USUARIO As Decimal) As USUARIORow
            Return CType(Me.Rows.Find(New Object() {COD_USUARIO}),USUARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As USUARIODataTable = CType(MyBase.Clone,USUARIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New USUARIODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_USUARIO = MyBase.Columns("COD_USUARIO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnPASS = MyBase.Columns("PASS")
            Me.columnADMIN = MyBase.Columns("ADMIN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_USUARIO = New Global.System.Data.DataColumn("COD_USUARIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_USUARIO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnPASS = New Global.System.Data.DataColumn("PASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASS)
            Me.columnADMIN = New Global.System.Data.DataColumn("ADMIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADMIN)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_USUARIO}, true))
            Me.columnCOD_USUARIO.AllowDBNull = false
            Me.columnCOD_USUARIO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 50
            Me.columnPASS.AllowDBNull = false
            Me.columnPASS.MaxLength = 200
            Me.columnADMIN.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUSUARIORow() As USUARIORow
            Return CType(Me.NewRow,USUARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New USUARIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(USUARIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.USUARIORowChangedEvent) Is Nothing) Then
                RaiseEvent USUARIORowChanged(Me, New USUARIORowChangeEvent(CType(e.Row,USUARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.USUARIORowChangingEvent) Is Nothing) Then
                RaiseEvent USUARIORowChanging(Me, New USUARIORowChangeEvent(CType(e.Row,USUARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.USUARIORowDeletedEvent) Is Nothing) Then
                RaiseEvent USUARIORowDeleted(Me, New USUARIORowChangeEvent(CType(e.Row,USUARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.USUARIORowDeletingEvent) Is Nothing) Then
                RaiseEvent USUARIORowDeleting(Me, New USUARIORowChangeEvent(CType(e.Row,USUARIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUSUARIORow(ByVal row As USUARIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "USUARIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VUELODataTable
        Inherits Global.System.Data.TypedTableBase(Of VUELORow)
        
        Private columnCOD_VUEL As Global.System.Data.DataColumn
        
        Private columnDESPUEGUE As Global.System.Data.DataColumn
        
        Private columnATERRISAJE As Global.System.Data.DataColumn
        
        Private columnFECHA_DESPEGUE As Global.System.Data.DataColumn
        
        Private columnFECHA_ATERRISAJE As Global.System.Data.DataColumn
        
        Private columnCOD_AVIO As Global.System.Data.DataColumn
        
        Private columnLUNES As Global.System.Data.DataColumn
        
        Private columnMARTES As Global.System.Data.DataColumn
        
        Private columnMIERCOLES As Global.System.Data.DataColumn
        
        Private columnJUEVES As Global.System.Data.DataColumn
        
        Private columnVIERNES As Global.System.Data.DataColumn
        
        Private columnSABADO As Global.System.Data.DataColumn
        
        Private columnDOMINGO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VUELO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_VUELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_VUEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESPUEGUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPUEGUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ATERRISAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATERRISAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHA_DESPEGUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DESPEGUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHA_ATERRISAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ATERRISAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COD_AVIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AVIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LUNESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLUNES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MARTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MIERCOLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMIERCOLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JUEVESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJUEVES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VIERNESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVIERNES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SABADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSABADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DOMINGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMINGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VUELORow
            Get
                Return CType(Me.Rows(index),VUELORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VUELORowChanging As VUELORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VUELORowChanged As VUELORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VUELORowDeleting As VUELORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VUELORowDeleted As VUELORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddVUELORow(ByVal row As VUELORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVUELORow(ByVal COD_VUEL As Decimal, ByVal parentAEROPUERTORowByFK_AERO_DESP As AEROPUERTORow, ByVal parentAEROPUERTORowByFK_AERO_ATERR As AEROPUERTORow, ByVal FECHA_DESPEGUE As Date, ByVal FECHA_ATERRISAJE As Date, ByVal parentAVIONRowByFK_AVIO_VUEL As AVIONRow, ByVal LUNES As String, ByVal MARTES As String, ByVal MIERCOLES As String, ByVal JUEVES As String, ByVal VIERNES As String, ByVal SABADO As String, ByVal DOMINGO As String) As VUELORow
            Dim rowVUELORow As VUELORow = CType(Me.NewRow,VUELORow)
            Dim columnValuesArray() As Object = New Object() {COD_VUEL, Nothing, Nothing, FECHA_DESPEGUE, FECHA_ATERRISAJE, Nothing, LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO}
            If (Not (parentAEROPUERTORowByFK_AERO_DESP) Is Nothing) Then
                columnValuesArray(1) = parentAEROPUERTORowByFK_AERO_DESP(0)
            End If
            If (Not (parentAEROPUERTORowByFK_AERO_ATERR) Is Nothing) Then
                columnValuesArray(2) = parentAEROPUERTORowByFK_AERO_ATERR(0)
            End If
            If (Not (parentAVIONRowByFK_AVIO_VUEL) Is Nothing) Then
                columnValuesArray(5) = parentAVIONRowByFK_AVIO_VUEL(0)
            End If
            rowVUELORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVUELORow)
            Return rowVUELORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCOD_VUEL(ByVal COD_VUEL As Decimal) As VUELORow
            Return CType(Me.Rows.Find(New Object() {COD_VUEL}),VUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VUELODataTable = CType(MyBase.Clone,VUELODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VUELODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCOD_VUEL = MyBase.Columns("COD_VUEL")
            Me.columnDESPUEGUE = MyBase.Columns("DESPUEGUE")
            Me.columnATERRISAJE = MyBase.Columns("ATERRISAJE")
            Me.columnFECHA_DESPEGUE = MyBase.Columns("FECHA_DESPEGUE")
            Me.columnFECHA_ATERRISAJE = MyBase.Columns("FECHA_ATERRISAJE")
            Me.columnCOD_AVIO = MyBase.Columns("COD_AVIO")
            Me.columnLUNES = MyBase.Columns("LUNES")
            Me.columnMARTES = MyBase.Columns("MARTES")
            Me.columnMIERCOLES = MyBase.Columns("MIERCOLES")
            Me.columnJUEVES = MyBase.Columns("JUEVES")
            Me.columnVIERNES = MyBase.Columns("VIERNES")
            Me.columnSABADO = MyBase.Columns("SABADO")
            Me.columnDOMINGO = MyBase.Columns("DOMINGO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCOD_VUEL = New Global.System.Data.DataColumn("COD_VUEL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_VUEL)
            Me.columnDESPUEGUE = New Global.System.Data.DataColumn("DESPUEGUE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPUEGUE)
            Me.columnATERRISAJE = New Global.System.Data.DataColumn("ATERRISAJE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATERRISAJE)
            Me.columnFECHA_DESPEGUE = New Global.System.Data.DataColumn("FECHA_DESPEGUE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DESPEGUE)
            Me.columnFECHA_ATERRISAJE = New Global.System.Data.DataColumn("FECHA_ATERRISAJE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ATERRISAJE)
            Me.columnCOD_AVIO = New Global.System.Data.DataColumn("COD_AVIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AVIO)
            Me.columnLUNES = New Global.System.Data.DataColumn("LUNES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLUNES)
            Me.columnMARTES = New Global.System.Data.DataColumn("MARTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARTES)
            Me.columnMIERCOLES = New Global.System.Data.DataColumn("MIERCOLES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMIERCOLES)
            Me.columnJUEVES = New Global.System.Data.DataColumn("JUEVES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJUEVES)
            Me.columnVIERNES = New Global.System.Data.DataColumn("VIERNES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVIERNES)
            Me.columnSABADO = New Global.System.Data.DataColumn("SABADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSABADO)
            Me.columnDOMINGO = New Global.System.Data.DataColumn("DOMINGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMINGO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_VUEL}, true))
            Me.columnCOD_VUEL.AllowDBNull = false
            Me.columnCOD_VUEL.Unique = true
            Me.columnDESPUEGUE.AllowDBNull = false
            Me.columnATERRISAJE.AllowDBNull = false
            Me.columnFECHA_DESPEGUE.AllowDBNull = false
            Me.columnFECHA_ATERRISAJE.AllowDBNull = false
            Me.columnCOD_AVIO.AllowDBNull = false
            Me.columnLUNES.MaxLength = 1
            Me.columnMARTES.MaxLength = 1
            Me.columnMIERCOLES.MaxLength = 1
            Me.columnJUEVES.MaxLength = 1
            Me.columnVIERNES.MaxLength = 1
            Me.columnSABADO.MaxLength = 1
            Me.columnDOMINGO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewVUELORow() As VUELORow
            Return CType(Me.NewRow,VUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VUELORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VUELORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VUELORowChangedEvent) Is Nothing) Then
                RaiseEvent VUELORowChanged(Me, New VUELORowChangeEvent(CType(e.Row,VUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VUELORowChangingEvent) Is Nothing) Then
                RaiseEvent VUELORowChanging(Me, New VUELORowChangeEvent(CType(e.Row,VUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VUELORowDeletedEvent) Is Nothing) Then
                RaiseEvent VUELORowDeleted(Me, New VUELORowChangeEvent(CType(e.Row,VUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VUELORowDeletingEvent) Is Nothing) Then
                RaiseEvent VUELORowDeleting(Me, New VUELORowChangeEvent(CType(e.Row,VUELORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveVUELORow(ByVal row As VUELORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Ds = New Ds()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VUELODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AEROPUERTORow
        Inherits Global.System.Data.DataRow
        
        Private tableAEROPUERTO As AEROPUERTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAEROPUERTO = CType(Me.Table,AEROPUERTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_AERO() As Decimal
            Get
                Return CType(Me(Me.tableAEROPUERTO.COD_AEROColumn),Decimal)
            End Get
            Set
                Me(Me.tableAEROPUERTO.COD_AEROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableAEROPUERTO.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableAEROPUERTO.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_CIUD() As Decimal
            Get
                Return CType(Me(Me.tableAEROPUERTO.COD_CIUDColumn),Decimal)
            End Get
            Set
                Me(Me.tableAEROPUERTO.COD_CIUDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CIUDADRow() As CIUDADRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CIUD_AERO")),CIUDADRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CIUD_AERO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetBOLETORowsByFK_DEST_BOLET() As BOLETORow()
            If (Me.Table.ChildRelations("FK_DEST_BOLET") Is Nothing) Then
                Return New BOLETORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DEST_BOLET")),BOLETORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetBOLETORowsByFK_SALIDA_BOLET() As BOLETORow()
            If (Me.Table.ChildRelations("FK_SALIDA_BOLET") Is Nothing) Then
                Return New BOLETORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SALIDA_BOLET")),BOLETORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetESCALARowsByFK_AERO_DESTINO() As ESCALARow()
            If (Me.Table.ChildRelations("FK_AERO_DESTINO") Is Nothing) Then
                Return New ESCALARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AERO_DESTINO")),ESCALARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetESCALARowsByFK_AERO_ESCALA() As ESCALARow()
            If (Me.Table.ChildRelations("FK_AERO_ESCALA") Is Nothing) Then
                Return New ESCALARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AERO_ESCALA")),ESCALARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetESCALARowsByFK_AERO_ORIGEN() As ESCALARow()
            If (Me.Table.ChildRelations("FK_AERO_ORIGEN") Is Nothing) Then
                Return New ESCALARow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AERO_ORIGEN")),ESCALARow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetVUELORowsByFK_AERO_ATERR() As VUELORow()
            If (Me.Table.ChildRelations("FK_AERO_ATERR") Is Nothing) Then
                Return New VUELORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AERO_ATERR")),VUELORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetVUELORowsByFK_AERO_DESP() As VUELORow()
            If (Me.Table.ChildRelations("FK_AERO_DESP") Is Nothing) Then
                Return New VUELORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AERO_DESP")),VUELORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AVIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableAVION As AVIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAVION = CType(Me.Table,AVIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_AVIO() As Decimal
            Get
                Return CType(Me(Me.tableAVION.COD_AVIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableAVION.COD_AVIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MODELO() As String
            Get
                Return CType(Me(Me.tableAVION.MODELOColumn),String)
            End Get
            Set
                Me(Me.tableAVION.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CAPACIDAD() As Decimal
            Get
                Return CType(Me(Me.tableAVION.CAPACIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tableAVION.CAPACIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_LINE() As Decimal
            Get
                Return CType(Me(Me.tableAVION.COD_LINEColumn),Decimal)
            End Get
            Set
                Me(Me.tableAVION.COD_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIERRA() As String
            Get
                Return CType(Me(Me.tableAVION.TIERRAColumn),String)
            End Get
            Set
                Me(Me.tableAVION.TIERRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINEARow() As LINEARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LINEA_AVION")),LINEARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LINEA_AVION"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetVUELORows() As VUELORow()
            If (Me.Table.ChildRelations("FK_AVIO_VUEL") Is Nothing) Then
                Return New VUELORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AVIO_VUEL")),VUELORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BOLETORow
        Inherits Global.System.Data.DataRow
        
        Private tableBOLETO As BOLETODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOLETO = CType(Me.Table,BOLETODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_BO() As Decimal
            Get
                Return CType(Me(Me.tableBOLETO.COD_BOColumn),Decimal)
            End Get
            Set
                Me(Me.tableBOLETO.COD_BOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_CLIE() As Decimal
            Get
                Return CType(Me(Me.tableBOLETO.COD_CLIEColumn),Decimal)
            End Get
            Set
                Me(Me.tableBOLETO.COD_CLIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_VUEL() As Decimal
            Get
                Return CType(Me(Me.tableBOLETO.COD_VUELColumn),Decimal)
            End Get
            Set
                Me(Me.tableBOLETO.COD_VUELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA_COMPRA() As Date
            Get
                Return CType(Me(Me.tableBOLETO.FECHA_COMPRAColumn),Date)
            End Get
            Set
                Me(Me.tableBOLETO.FECHA_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORIGEN() As Decimal
            Get
                Return CType(Me(Me.tableBOLETO.ORIGENColumn),Decimal)
            End Get
            Set
                Me(Me.tableBOLETO.ORIGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESTINO() As Decimal
            Get
                Return CType(Me(Me.tableBOLETO.DESTINOColumn),Decimal)
            End Get
            Set
                Me(Me.tableBOLETO.DESTINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VALIDO() As String
            Get
                Return CType(Me(Me.tableBOLETO.VALIDOColumn),String)
            End Get
            Set
                Me(Me.tableBOLETO.VALIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CLIENTERow() As CLIENTERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CLIE_BOLET")),CLIENTERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CLIE_BOLET"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_DEST_BOLET() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DEST_BOLET")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DEST_BOLET"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_SALIDA_BOLET() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SALIDA_BOLET")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SALIDA_BOLET"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VUELORow() As VUELORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VUEL_BOLET")),VUELORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VUEL_BOLET"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CIUDADRow
        Inherits Global.System.Data.DataRow
        
        Private tableCIUDAD As CIUDADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCIUDAD = CType(Me.Table,CIUDADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_CIUD() As Decimal
            Get
                Return CType(Me(Me.tableCIUDAD.COD_CIUDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCIUDAD.COD_CIUDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableCIUDAD.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableCIUDAD.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_PA() As Decimal
            Get
                Return CType(Me(Me.tableCIUDAD.COD_PAColumn),Decimal)
            End Get
            Set
                Me(Me.tableCIUDAD.COD_PAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PAISRow() As PAISRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PAIS_CIUD")),PAISRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PAIS_CIUD"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetAEROPUERTORows() As AEROPUERTORow()
            If (Me.Table.ChildRelations("FK_CIUD_AERO") Is Nothing) Then
                Return New AEROPUERTORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CIUD_AERO")),AEROPUERTORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CLIENTERow
        Inherits Global.System.Data.DataRow
        
        Private tableCLIENTE As CLIENTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCLIENTE = CType(Me.Table,CLIENTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_CLIE() As Decimal
            Get
                Return CType(Me(Me.tableCLIENTE.COD_CLIEColumn),Decimal)
            End Get
            Set
                Me(Me.tableCLIENTE.COD_CLIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DPI() As String
            Get
                Return CType(Me(Me.tableCLIENTE.DPIColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.DPIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PASAPORTE() As String
            Get
                Return CType(Me(Me.tableCLIENTE.PASAPORTEColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.PASAPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NACIONALIDAD() As String
            Get
                Return CType(Me(Me.tableCLIENTE.NACIONALIDADColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.NACIONALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA_NACIMIENTO() As Date
            Get
                Return CType(Me(Me.tableCLIENTE.FECHA_NACIMIENTOColumn),Date)
            End Get
            Set
                Me(Me.tableCLIENTE.FECHA_NACIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableCLIENTE.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property APELLIDO() As String
            Get
                Return CType(Me(Me.tableCLIENTE.APELLIDOColumn),String)
            End Get
            Set
                Me(Me.tableCLIENTE.APELLIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_USUARIO() As Decimal
            Get
                Return CType(Me(Me.tableCLIENTE.COD_USUARIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableCLIENTE.COD_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USUARIORow() As USUARIORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CLIENTE_USUARIO_1")),USUARIORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CLIENTE_USUARIO_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetBOLETORows() As BOLETORow()
            If (Me.Table.ChildRelations("FK_CLIE_BOLET") Is Nothing) Then
                Return New BOLETORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CLIE_BOLET")),BOLETORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ESCALARow
        Inherits Global.System.Data.DataRow
        
        Private tableESCALA As ESCALADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableESCALA = CType(Me.Table,ESCALADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_VUEL() As Decimal
            Get
                Return CType(Me(Me.tableESCALA.COD_VUELColumn),Decimal)
            End Get
            Set
                Me(Me.tableESCALA.COD_VUELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTO() As Decimal
            Get
                Return CType(Me(Me.tableESCALA.AEROPUERTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableESCALA.AEROPUERTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORIGEN() As Decimal
            Get
                Return CType(Me(Me.tableESCALA.ORIGENColumn),Decimal)
            End Get
            Set
                Me(Me.tableESCALA.ORIGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESTINO() As Decimal
            Get
                Return CType(Me(Me.tableESCALA.DESTINOColumn),Decimal)
            End Get
            Set
                Me(Me.tableESCALA.DESTINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA_ORIGEN() As Date
            Get
                Return CType(Me(Me.tableESCALA.FECHA_ORIGENColumn),Date)
            End Get
            Set
                Me(Me.tableESCALA.FECHA_ORIGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA_DESTINO() As Date
            Get
                Return CType(Me(Me.tableESCALA.FECHA_DESTINOColumn),Date)
            End Get
            Set
                Me(Me.tableESCALA.FECHA_DESTINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_AERO_DESTINO() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AERO_DESTINO")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AERO_DESTINO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_AERO_ESCALA() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AERO_ESCALA")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AERO_ESCALA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_AERO_ORIGEN() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AERO_ORIGEN")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AERO_ORIGEN"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LINEARow
        Inherits Global.System.Data.DataRow
        
        Private tableLINEA As LINEADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLINEA = CType(Me.Table,LINEADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_LINE() As Decimal
            Get
                Return CType(Me(Me.tableLINEA.COD_LINEColumn),Decimal)
            End Get
            Set
                Me(Me.tableLINEA.COD_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableLINEA.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableLINEA.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_USUARIO() As Decimal
            Get
                Return CType(Me(Me.tableLINEA.COD_USUARIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableLINEA.COD_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetAVIONRows() As AVIONRow()
            If (Me.Table.ChildRelations("FK_LINEA_AVION") Is Nothing) Then
                Return New AVIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LINEA_AVION")),AVIONRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPERSONALRows() As PERSONALRow()
            If (Me.Table.ChildRelations("FK_LINEA_PERSONAL") Is Nothing) Then
                Return New PERSONALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LINEA_PERSONAL")),PERSONALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PAISRow
        Inherits Global.System.Data.DataRow
        
        Private tablePAIS As PAISDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAIS = CType(Me.Table,PAISDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_PA() As Decimal
            Get
                Return CType(Me(Me.tablePAIS.COD_PAColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAIS.COD_PAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tablePAIS.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePAIS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCIUDADRows() As CIUDADRow()
            If (Me.Table.ChildRelations("FK_PAIS_CIUD") Is Nothing) Then
                Return New CIUDADRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PAIS_CIUD")),CIUDADRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PERSONALRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERSONAL As PERSONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERSONAL = CType(Me.Table,PERSONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_PERSO() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.COD_PERSOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.COD_PERSOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tablePERSONAL.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property APELLIDO() As String
            Get
                Return CType(Me(Me.tablePERSONAL.APELLIDOColumn),String)
            End Get
            Set
                Me(Me.tablePERSONAL.APELLIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NACIONALIDAD() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.NACIONALIDADColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.NACIONALIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_PRO() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.COD_PROColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.COD_PROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_LINE() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.COD_LINEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.COD_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_USUARIO() As Decimal
            Get
                Return CType(Me(Me.tablePERSONAL.COD_USUARIOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERSONAL.COD_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LINEARow() As LINEARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LINEA_PERSONAL")),LINEARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LINEA_PERSONAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USUARIORow() As USUARIORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PERSONAL_USUARIO_1")),USUARIORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PERSONAL_USUARIO_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROFESIONRow() As PROFESIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROFESI_PERSON")),PROFESIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROFESI_PERSON"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTURNORows() As TURNORow()
            If (Me.Table.ChildRelations("FK_PERSONA_TURNO") Is Nothing) Then
                Return New TURNORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PERSONA_TURNO")),TURNORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PROFESIONRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROFESION As PROFESIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROFESION = CType(Me.Table,PROFESIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_PRO() As Decimal
            Get
                Return CType(Me(Me.tablePROFESION.COD_PROColumn),Decimal)
            End Get
            Set
                Me(Me.tablePROFESION.COD_PROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tablePROFESION.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tablePROFESION.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUELDO() As Decimal
            Get
                Return CType(Me(Me.tablePROFESION.SUELDOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePROFESION.SUELDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPERSONALRows() As PERSONALRow()
            If (Me.Table.ChildRelations("FK_PROFESI_PERSON") Is Nothing) Then
                Return New PERSONALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROFESI_PERSON")),PERSONALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TURNORow
        Inherits Global.System.Data.DataRow
        
        Private tableTURNO As TURNODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTURNO = CType(Me.Table,TURNODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_PERSO() As Decimal
            Get
                Return CType(Me(Me.tableTURNO.COD_PERSOColumn),Decimal)
            End Get
            Set
                Me(Me.tableTURNO.COD_PERSOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_VUEL() As Decimal
            Get
                Return CType(Me(Me.tableTURNO.COD_VUELColumn),Decimal)
            End Get
            Set
                Me(Me.tableTURNO.COD_VUELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HORA_VUELO() As String
            Get
                Return CType(Me(Me.tableTURNO.HORA_VUELOColumn),String)
            End Get
            Set
                Me(Me.tableTURNO.HORA_VUELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PERSONALRow() As PERSONALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PERSONA_TURNO")),PERSONALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PERSONA_TURNO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VUELORow() As VUELORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_VUELO_TURN")),VUELORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_VUELO_TURN"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class USUARIORow
        Inherits Global.System.Data.DataRow
        
        Private tableUSUARIO As USUARIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUSUARIO = CType(Me.Table,USUARIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_USUARIO() As Decimal
            Get
                Return CType(Me(Me.tableUSUARIO.COD_USUARIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableUSUARIO.COD_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableUSUARIO.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIO.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PASS() As String
            Get
                Return CType(Me(Me.tableUSUARIO.PASSColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIO.PASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ADMIN() As Decimal
            Get
                Return CType(Me(Me.tableUSUARIO.ADMINColumn),Decimal)
            End Get
            Set
                Me(Me.tableUSUARIO.ADMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCLIENTERows() As CLIENTERow()
            If (Me.Table.ChildRelations("FK_CLIENTE_USUARIO_1") Is Nothing) Then
                Return New CLIENTERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CLIENTE_USUARIO_1")),CLIENTERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPERSONALRows() As PERSONALRow()
            If (Me.Table.ChildRelations("FK_PERSONAL_USUARIO_1") Is Nothing) Then
                Return New PERSONALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PERSONAL_USUARIO_1")),PERSONALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VUELORow
        Inherits Global.System.Data.DataRow
        
        Private tableVUELO As VUELODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVUELO = CType(Me.Table,VUELODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_VUEL() As Decimal
            Get
                Return CType(Me(Me.tableVUELO.COD_VUELColumn),Decimal)
            End Get
            Set
                Me(Me.tableVUELO.COD_VUELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESPUEGUE() As Decimal
            Get
                Return CType(Me(Me.tableVUELO.DESPUEGUEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVUELO.DESPUEGUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ATERRISAJE() As Decimal
            Get
                Return CType(Me(Me.tableVUELO.ATERRISAJEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVUELO.ATERRISAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA_DESPEGUE() As Date
            Get
                Return CType(Me(Me.tableVUELO.FECHA_DESPEGUEColumn),Date)
            End Get
            Set
                Me(Me.tableVUELO.FECHA_DESPEGUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA_ATERRISAJE() As Date
            Get
                Return CType(Me(Me.tableVUELO.FECHA_ATERRISAJEColumn),Date)
            End Get
            Set
                Me(Me.tableVUELO.FECHA_ATERRISAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COD_AVIO() As Decimal
            Get
                Return CType(Me(Me.tableVUELO.COD_AVIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableVUELO.COD_AVIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LUNES() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.LUNESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LUNES' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.LUNESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MARTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.MARTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MARTES' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.MARTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MIERCOLES() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.MIERCOLESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MIERCOLES' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.MIERCOLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JUEVES() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.JUEVESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'JUEVES' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.JUEVESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VIERNES() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.VIERNESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VIERNES' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.VIERNESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SABADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.SABADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SABADO' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.SABADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DOMINGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableVUELO.DOMINGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOMINGO' de la tabla 'VUELO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUELO.DOMINGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_AERO_ATERR() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AERO_ATERR")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AERO_ATERR"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AEROPUERTORowByFK_AERO_DESP() As AEROPUERTORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AERO_DESP")),AEROPUERTORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AERO_DESP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AVIONRow() As AVIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AVIO_VUEL")),AVIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AVIO_VUEL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLUNESNull() As Boolean
            Return Me.IsNull(Me.tableVUELO.LUNESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLUNESNull()
            Me(Me.tableVUELO.LUNESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMARTESNull() As Boolean
            Return Me.IsNull(Me.tableVUELO.MARTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMARTESNull()
            Me(Me.tableVUELO.MARTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMIERCOLESNull() As Boolean
            Return Me.IsNull(Me.tableVUELO.MIERCOLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMIERCOLESNull()
            Me(Me.tableVUELO.MIERCOLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsJUEVESNull() As Boolean
            Return Me.IsNull(Me.tableVUELO.JUEVESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetJUEVESNull()
            Me(Me.tableVUELO.JUEVESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVIERNESNull() As Boolean
            Return Me.IsNull(Me.tableVUELO.VIERNESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVIERNESNull()
            Me(Me.tableVUELO.VIERNESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSABADONull() As Boolean
            Return Me.IsNull(Me.tableVUELO.SABADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSABADONull()
            Me(Me.tableVUELO.SABADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDOMINGONull() As Boolean
            Return Me.IsNull(Me.tableVUELO.DOMINGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDOMINGONull()
            Me(Me.tableVUELO.DOMINGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetBOLETORows() As BOLETORow()
            If (Me.Table.ChildRelations("FK_VUEL_BOLET") Is Nothing) Then
                Return New BOLETORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VUEL_BOLET")),BOLETORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTURNORows() As TURNORow()
            If (Me.Table.ChildRelations("FK_VUELO_TURN") Is Nothing) Then
                Return New TURNORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_VUELO_TURN")),TURNORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AEROPUERTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AEROPUERTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AEROPUERTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AEROPUERTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AVIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AVIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AVIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AVIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class BOLETORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BOLETORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As BOLETORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As BOLETORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CIUDADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CIUDADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CIUDADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CIUDADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CLIENTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CLIENTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CLIENTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CLIENTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ESCALARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ESCALARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ESCALARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ESCALARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class LINEARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LINEARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As LINEARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As LINEARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PAISRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PAISRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PAISRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PAISRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PERSONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERSONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PERSONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PERSONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PROFESIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROFESIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PROFESIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PROFESIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TURNORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TURNORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TURNORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TURNORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class USUARIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As USUARIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As USUARIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As USUARIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class VUELORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VUELORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As VUELORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As VUELORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AEROPUERTOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AEROPUERTO"
            tableMapping.ColumnMappings.Add("COD_AERO", "COD_AERO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("COD_CIUD", "COD_CIUD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""AEROPUERTO"" WHERE ((""COD_AERO"" = :Original_COD_AERO) AND (""NO"& _ 
                "MBRE"" = :Original_NOMBRE) AND (""COD_CIUD"" = :Original_COD_CIUD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_AERO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AERO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""AEROPUERTO"" (""COD_AERO"", ""NOMBRE"", ""COD_CIUD"") VALUES (:COD_A"& _ 
                "ERO, :NOMBRE, :COD_CIUD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_AERO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AERO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""AEROPUERTO"" SET ""COD_AERO"" = :COD_AERO, ""NOMBRE"" = :NOMBRE, ""COD_C"& _ 
                "IUD"" = :COD_CIUD WHERE ((""COD_AERO"" = :Original_COD_AERO) AND (""NOMBRE"" = :Origi"& _ 
                "nal_NOMBRE) AND (""COD_CIUD"" = :Original_COD_CIUD))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_AERO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AERO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_AERO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AERO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_AERO, NOMBRE, COD_CIUD FROM AERO.AEROPUERTO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.AEROPUERTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.AEROPUERTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.AEROPUERTODataTable = New Ds.AEROPUERTODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.AEROPUERTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "AEROPUERTO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_AERO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_CIUD As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_AERO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COD_CIUD,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_AERO As Decimal, ByVal NOMBRE As String, ByVal COD_CIUD As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_AERO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(COD_CIUD,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_AERO As Decimal, ByVal NOMBRE As String, ByVal COD_CIUD As Decimal, ByVal Original_COD_AERO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_CIUD As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_AERO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COD_CIUD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_COD_AERO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COD_CIUD,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal COD_CIUD As Decimal, ByVal Original_COD_AERO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_CIUD As Decimal) As Integer
            Return Me.Update(Original_COD_AERO, NOMBRE, COD_CIUD, Original_COD_AERO, Original_NOMBRE, Original_COD_CIUD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AVIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AVION"
            tableMapping.ColumnMappings.Add("COD_AVIO", "COD_AVIO")
            tableMapping.ColumnMappings.Add("MODELO", "MODELO")
            tableMapping.ColumnMappings.Add("CAPACIDAD", "CAPACIDAD")
            tableMapping.ColumnMappings.Add("COD_LINE", "COD_LINE")
            tableMapping.ColumnMappings.Add("TIERRA", "TIERRA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""AVION"" WHERE ((""COD_AVIO"" = :Original_COD_AVIO) AND (""MODELO"""& _ 
                " = :Original_MODELO) AND (""CAPACIDAD"" = :Original_CAPACIDAD) AND (""COD_LINE"" = :"& _ 
                "Original_COD_LINE) AND (""TIERRA"" = :Original_TIERRA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MODELO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "MODELO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CAPACIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "CAPACIDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TIERRA"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "TIERRA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""AVION"" (""COD_AVIO"", ""MODELO"", ""CAPACIDAD"", ""COD_LINE"", ""TIERR"& _ 
                "A"") VALUES (:COD_AVIO, :MODELO, :CAPACIDAD, :COD_LINE, :TIERRA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "MODELO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "MODELO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "CAPACIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "CAPACIDAD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "TIERRA"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "TIERRA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""AVION"" SET ""COD_AVIO"" = :COD_AVIO, ""MODELO"" = :MODELO, ""CAPACIDAD"""& _ 
                " = :CAPACIDAD, ""COD_LINE"" = :COD_LINE, ""TIERRA"" = :TIERRA WHERE ((""COD_AVIO"" = :"& _ 
                "Original_COD_AVIO) AND (""MODELO"" = :Original_MODELO) AND (""CAPACIDAD"" = :Origina"& _ 
                "l_CAPACIDAD) AND (""COD_LINE"" = :Original_COD_LINE) AND (""TIERRA"" = :Original_TIE"& _ 
                "RRA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "MODELO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "MODELO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "CAPACIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "CAPACIDAD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "TIERRA"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "TIERRA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MODELO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "MODELO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CAPACIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "CAPACIDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_TIERRA"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "TIERRA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_AVIO, MODELO, CAPACIDAD, COD_LINE, TIERRA FROM AERO.AVION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.AVIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.AVIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.AVIONDataTable = New Ds.AVIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.AVIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "AVION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_AVIO As Decimal, ByVal Original_MODELO As String, ByVal Original_CAPACIDAD As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_TIERRA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_AVIO,Decimal)
            If (Original_MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODELO")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MODELO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CAPACIDAD,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COD_LINE,Decimal)
            If (Original_TIERRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIERRA")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TIERRA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_AVIO As Decimal, ByVal MODELO As String, ByVal CAPACIDAD As Decimal, ByVal COD_LINE As Decimal, ByVal TIERRA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_AVIO,Decimal)
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MODELO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CAPACIDAD,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(COD_LINE,Decimal)
            If (TIERRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIERRA")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TIERRA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_AVIO As Decimal, ByVal MODELO As String, ByVal CAPACIDAD As Decimal, ByVal COD_LINE As Decimal, ByVal TIERRA As String, ByVal Original_COD_AVIO As Decimal, ByVal Original_MODELO As String, ByVal Original_CAPACIDAD As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_TIERRA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_AVIO,Decimal)
            If (MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MODELO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MODELO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CAPACIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COD_LINE,Decimal)
            If (TIERRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIERRA")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TIERRA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COD_AVIO,Decimal)
            If (Original_MODELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MODELO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MODELO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CAPACIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COD_LINE,Decimal)
            If (Original_TIERRA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIERRA")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_TIERRA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MODELO As String, ByVal CAPACIDAD As Decimal, ByVal COD_LINE As Decimal, ByVal TIERRA As String, ByVal Original_COD_AVIO As Decimal, ByVal Original_MODELO As String, ByVal Original_CAPACIDAD As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_TIERRA As String) As Integer
            Return Me.Update(Original_COD_AVIO, MODELO, CAPACIDAD, COD_LINE, TIERRA, Original_COD_AVIO, Original_MODELO, Original_CAPACIDAD, Original_COD_LINE, Original_TIERRA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BOLETOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BOLETO"
            tableMapping.ColumnMappings.Add("COD_BO", "COD_BO")
            tableMapping.ColumnMappings.Add("COD_CLIE", "COD_CLIE")
            tableMapping.ColumnMappings.Add("COD_VUEL", "COD_VUEL")
            tableMapping.ColumnMappings.Add("FECHA_COMPRA", "FECHA_COMPRA")
            tableMapping.ColumnMappings.Add("ORIGEN", "ORIGEN")
            tableMapping.ColumnMappings.Add("DESTINO", "DESTINO")
            tableMapping.ColumnMappings.Add("VALIDO", "VALIDO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""BOLETO"" WHERE ((""COD_BO"" = :Original_COD_BO) AND (""COD_CLIE"" "& _ 
                "= :Original_COD_CLIE) AND (""COD_VUEL"" = :Original_COD_VUEL) AND (""FECHA_COMPRA"" "& _ 
                "= :Original_FECHA_COMPRA) AND (""ORIGEN"" = :Original_ORIGEN) AND (""DESTINO"" = :Or"& _ 
                "iginal_DESTINO) AND (""VALIDO"" = :Original_VALIDO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_BO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_BO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_COMPRA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_COMPRA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ORIGEN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ORIGEN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DESTINO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESTINO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VALIDO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VALIDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""BOLETO"" (""COD_BO"", ""COD_CLIE"", ""COD_VUEL"", ""FECHA_COMPRA"", ""O"& _ 
                "RIGEN"", ""DESTINO"", ""VALIDO"") VALUES (:COD_BO, :COD_CLIE, :COD_VUEL, :FECHA_COMPR"& _ 
                "A, :ORIGEN, :DESTINO, :VALIDO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_BO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_BO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_COMPRA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_COMPRA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ORIGEN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ORIGEN"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DESTINO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESTINO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "VALIDO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VALIDO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""BOLETO"" SET ""COD_BO"" = :COD_BO, ""COD_CLIE"" = :COD_CLIE, ""COD_VUEL"""& _ 
                " = :COD_VUEL, ""FECHA_COMPRA"" = :FECHA_COMPRA, ""ORIGEN"" = :ORIGEN, ""DESTINO"" = :D"& _ 
                "ESTINO, ""VALIDO"" = :VALIDO WHERE ((""COD_BO"" = :Original_COD_BO) AND (""COD_CLIE"" "& _ 
                "= :Original_COD_CLIE) AND (""COD_VUEL"" = :Original_COD_VUEL) AND (""FECHA_COMPRA"" "& _ 
                "= :Original_FECHA_COMPRA) AND (""ORIGEN"" = :Original_ORIGEN) AND (""DESTINO"" = :Or"& _ 
                "iginal_DESTINO) AND (""VALIDO"" = :Original_VALIDO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_BO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_BO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_COMPRA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_COMPRA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ORIGEN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ORIGEN"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DESTINO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESTINO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "VALIDO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VALIDO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_BO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_BO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_COMPRA"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_COMPRA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ORIGEN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ORIGEN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DESTINO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESTINO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VALIDO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VALIDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_BO, COD_CLIE, COD_VUEL, FECHA_COMPRA, ORIGEN, DESTINO, VALIDO FROM AER"& _ 
                "O.BOLETO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.BOLETODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.BOLETODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.BOLETODataTable = New Ds.BOLETODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.BOLETODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "BOLETO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_BO As Decimal, ByVal Original_COD_CLIE As Decimal, ByVal Original_COD_VUEL As Decimal, ByVal Original_FECHA_COMPRA As Date, ByVal Original_ORIGEN As Decimal, ByVal Original_DESTINO As Decimal, ByVal Original_VALIDO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_BO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COD_CLIE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COD_VUEL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_COMPRA,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ORIGEN,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DESTINO,Decimal)
            If (Original_VALIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VALIDO")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_VALIDO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_BO As Decimal, ByVal COD_CLIE As Decimal, ByVal COD_VUEL As Decimal, ByVal FECHA_COMPRA As Date, ByVal ORIGEN As Decimal, ByVal DESTINO As Decimal, ByVal VALIDO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_BO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COD_CLIE,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(COD_VUEL,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_COMPRA,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ORIGEN,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(DESTINO,Decimal)
            If (VALIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VALIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(VALIDO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_BO As Decimal, ByVal COD_CLIE As Decimal, ByVal COD_VUEL As Decimal, ByVal FECHA_COMPRA As Date, ByVal ORIGEN As Decimal, ByVal DESTINO As Decimal, ByVal VALIDO As String, ByVal Original_COD_BO As Decimal, ByVal Original_COD_CLIE As Decimal, ByVal Original_COD_VUEL As Decimal, ByVal Original_FECHA_COMPRA As Date, ByVal Original_ORIGEN As Decimal, ByVal Original_DESTINO As Decimal, ByVal Original_VALIDO As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_BO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COD_CLIE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COD_VUEL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_COMPRA,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ORIGEN,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DESTINO,Decimal)
            If (VALIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VALIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(VALIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_COD_BO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COD_CLIE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COD_VUEL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FECHA_COMPRA,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ORIGEN,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DESTINO,Decimal)
            If (Original_VALIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VALIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_VALIDO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_CLIE As Decimal, ByVal COD_VUEL As Decimal, ByVal FECHA_COMPRA As Date, ByVal ORIGEN As Decimal, ByVal DESTINO As Decimal, ByVal VALIDO As String, ByVal Original_COD_BO As Decimal, ByVal Original_COD_CLIE As Decimal, ByVal Original_COD_VUEL As Decimal, ByVal Original_FECHA_COMPRA As Date, ByVal Original_ORIGEN As Decimal, ByVal Original_DESTINO As Decimal, ByVal Original_VALIDO As String) As Integer
            Return Me.Update(Original_COD_BO, COD_CLIE, COD_VUEL, FECHA_COMPRA, ORIGEN, DESTINO, VALIDO, Original_COD_BO, Original_COD_CLIE, Original_COD_VUEL, Original_FECHA_COMPRA, Original_ORIGEN, Original_DESTINO, Original_VALIDO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CIUDADTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CIUDAD"
            tableMapping.ColumnMappings.Add("COD_CIUD", "COD_CIUD")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("COD_PA", "COD_PA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""CIUDAD"" WHERE ((""COD_CIUD"" = :Original_COD_CIUD) AND (""NOMBRE"& _ 
                """ = :Original_NOMBRE) AND (""COD_PA"" = :Original_COD_PA))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""CIUDAD"" (""COD_CIUD"", ""NOMBRE"", ""COD_PA"") VALUES (:COD_CIUD, :"& _ 
                "NOMBRE, :COD_PA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""CIUDAD"" SET ""COD_CIUD"" = :COD_CIUD, ""NOMBRE"" = :NOMBRE, ""COD_PA"" ="& _ 
                " :COD_PA WHERE ((""COD_CIUD"" = :Original_COD_CIUD) AND (""NOMBRE"" = :Original_NOMB"& _ 
                "RE) AND (""COD_PA"" = :Original_COD_PA))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CIUD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CIUD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_CIUD, NOMBRE, COD_PA FROM AERO.CIUDAD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.CIUDADDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.CIUDADDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.CIUDADDataTable = New Ds.CIUDADDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.CIUDADDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "CIUDAD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_CIUD As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_PA As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_CIUD,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COD_PA,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_CIUD As Decimal, ByVal NOMBRE As String, ByVal COD_PA As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_CIUD,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(COD_PA,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_CIUD As Decimal, ByVal NOMBRE As String, ByVal COD_PA As Decimal, ByVal Original_COD_CIUD As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_PA As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_CIUD,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COD_PA,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_COD_CIUD,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COD_PA,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal COD_PA As Decimal, ByVal Original_COD_CIUD As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_PA As Decimal) As Integer
            Return Me.Update(Original_COD_CIUD, NOMBRE, COD_PA, Original_COD_CIUD, Original_NOMBRE, Original_COD_PA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CLIENTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CLIENTE"
            tableMapping.ColumnMappings.Add("COD_CLIE", "COD_CLIE")
            tableMapping.ColumnMappings.Add("DPI", "DPI")
            tableMapping.ColumnMappings.Add("PASAPORTE", "PASAPORTE")
            tableMapping.ColumnMappings.Add("NACIONALIDAD", "NACIONALIDAD")
            tableMapping.ColumnMappings.Add("FECHA_NACIMIENTO", "FECHA_NACIMIENTO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("APELLIDO", "APELLIDO")
            tableMapping.ColumnMappings.Add("COD_USUARIO", "COD_USUARIO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""CLIENTE"" WHERE ((""COD_CLIE"" = :Original_COD_CLIE) AND (""DPI"" "& _ 
                "= :Original_DPI) AND (""PASAPORTE"" = :Original_PASAPORTE) AND (""NACIONALIDAD"" = :"& _ 
                "Original_NACIONALIDAD) AND (""FECHA_NACIMIENTO"" = :Original_FECHA_NACIMIENTO) AND"& _ 
                " (""NOMBRE"" = :Original_NOMBRE) AND (""APELLIDO"" = :Original_APELLIDO) AND (""COD_U"& _ 
                "SUARIO"" = :Original_COD_USUARIO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DPI"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DPI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PASAPORTE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASAPORTE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NACIONALIDAD"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_NACIMIENTO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_NACIMIENTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""CLIENTE"" (""COD_CLIE"", ""DPI"", ""PASAPORTE"", ""NACIONALIDAD"", ""FE"& _ 
                "CHA_NACIMIENTO"", ""NOMBRE"", ""APELLIDO"", ""COD_USUARIO"") VALUES (:COD_CLIE, :DPI, :"& _ 
                "PASAPORTE, :NACIONALIDAD, :FECHA_NACIMIENTO, :NOMBRE, :APELLIDO, :COD_USUARIO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DPI"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DPI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "PASAPORTE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASAPORTE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NACIONALIDAD"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_NACIMIENTO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_NACIMIENTO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""CLIENTE"" SET ""COD_CLIE"" = :COD_CLIE, ""DPI"" = :DPI, ""PASAPORTE"" = :"& _ 
                "PASAPORTE, ""NACIONALIDAD"" = :NACIONALIDAD, ""FECHA_NACIMIENTO"" = :FECHA_NACIMIENT"& _ 
                "O, ""NOMBRE"" = :NOMBRE, ""APELLIDO"" = :APELLIDO, ""COD_USUARIO"" = :COD_USUARIO WHER"& _ 
                "E ((""COD_CLIE"" = :Original_COD_CLIE) AND (""DPI"" = :Original_DPI) AND (""PASAPORTE"& _ 
                """ = :Original_PASAPORTE) AND (""NACIONALIDAD"" = :Original_NACIONALIDAD) AND (""FEC"& _ 
                "HA_NACIMIENTO"" = :Original_FECHA_NACIMIENTO) AND (""NOMBRE"" = :Original_NOMBRE) A"& _ 
                "ND (""APELLIDO"" = :Original_APELLIDO) AND (""COD_USUARIO"" = :Original_COD_USUARIO)"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DPI"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DPI"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "PASAPORTE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASAPORTE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NACIONALIDAD"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_NACIMIENTO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_NACIMIENTO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_CLIE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_CLIE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DPI"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "DPI"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PASAPORTE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASAPORTE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NACIONALIDAD"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_NACIMIENTO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_NACIMIENTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_CLIE, DPI, PASAPORTE, NACIONALIDAD, FECHA_NACIMIENTO, NOMBRE, APELLIDO"& _ 
                ", COD_USUARIO FROM AERO.CLIENTE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.CLIENTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.CLIENTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.CLIENTEDataTable = New Ds.CLIENTEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.CLIENTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "CLIENTE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_CLIE As Decimal, ByVal Original_DPI As String, ByVal Original_PASAPORTE As String, ByVal Original_NACIONALIDAD As String, ByVal Original_FECHA_NACIMIENTO As Date, ByVal Original_NOMBRE As String, ByVal Original_APELLIDO As String, ByVal Original_COD_USUARIO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_CLIE,Decimal)
            If (Original_DPI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DPI")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DPI,String)
            End If
            If (Original_PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASAPORTE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PASAPORTE,String)
            End If
            If (Original_NACIONALIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NACIONALIDAD")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NACIONALIDAD,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FECHA_NACIMIENTO,Date)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APELLIDO")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_APELLIDO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_CLIE As Decimal, ByVal DPI As String, ByVal PASAPORTE As String, ByVal NACIONALIDAD As String, ByVal FECHA_NACIMIENTO As Date, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal COD_USUARIO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_CLIE,Decimal)
            If (DPI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DPI")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DPI,String)
            End If
            If (PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASAPORTE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PASAPORTE,String)
            End If
            If (NACIONALIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NACIONALIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NACIONALIDAD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_NACIMIENTO,Date)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(APELLIDO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COD_CLIE As Decimal,  _
                    ByVal DPI As String,  _
                    ByVal PASAPORTE As String,  _
                    ByVal NACIONALIDAD As String,  _
                    ByVal FECHA_NACIMIENTO As Date,  _
                    ByVal NOMBRE As String,  _
                    ByVal APELLIDO As String,  _
                    ByVal COD_USUARIO As Decimal,  _
                    ByVal Original_COD_CLIE As Decimal,  _
                    ByVal Original_DPI As String,  _
                    ByVal Original_PASAPORTE As String,  _
                    ByVal Original_NACIONALIDAD As String,  _
                    ByVal Original_FECHA_NACIMIENTO As Date,  _
                    ByVal Original_NOMBRE As String,  _
                    ByVal Original_APELLIDO As String,  _
                    ByVal Original_COD_USUARIO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_CLIE,Decimal)
            If (DPI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DPI")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DPI,String)
            End If
            If (PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASAPORTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PASAPORTE,String)
            End If
            If (NACIONALIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NACIONALIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NACIONALIDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_NACIMIENTO,Date)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(APELLIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COD_USUARIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COD_CLIE,Decimal)
            If (Original_DPI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DPI")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DPI,String)
            End If
            If (Original_PASAPORTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASAPORTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PASAPORTE,String)
            End If
            If (Original_NACIONALIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NACIONALIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_NACIONALIDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FECHA_NACIMIENTO,Date)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_APELLIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DPI As String, ByVal PASAPORTE As String, ByVal NACIONALIDAD As String, ByVal FECHA_NACIMIENTO As Date, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal COD_USUARIO As Decimal, ByVal Original_COD_CLIE As Decimal, ByVal Original_DPI As String, ByVal Original_PASAPORTE As String, ByVal Original_NACIONALIDAD As String, ByVal Original_FECHA_NACIMIENTO As Date, ByVal Original_NOMBRE As String, ByVal Original_APELLIDO As String, ByVal Original_COD_USUARIO As Decimal) As Integer
            Return Me.Update(Original_COD_CLIE, DPI, PASAPORTE, NACIONALIDAD, FECHA_NACIMIENTO, NOMBRE, APELLIDO, COD_USUARIO, Original_COD_CLIE, Original_DPI, Original_PASAPORTE, Original_NACIONALIDAD, Original_FECHA_NACIMIENTO, Original_NOMBRE, Original_APELLIDO, Original_COD_USUARIO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ESCALATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ESCALA"
            tableMapping.ColumnMappings.Add("COD_VUEL", "COD_VUEL")
            tableMapping.ColumnMappings.Add("AEROPUERTO", "AEROPUERTO")
            tableMapping.ColumnMappings.Add("ORIGEN", "ORIGEN")
            tableMapping.ColumnMappings.Add("DESTINO", "DESTINO")
            tableMapping.ColumnMappings.Add("FECHA_ORIGEN", "FECHA_ORIGEN")
            tableMapping.ColumnMappings.Add("FECHA_DESTINO", "FECHA_DESTINO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""ESCALA"" (""COD_VUEL"", ""AEROPUERTO"", ""ORIGEN"", ""DESTINO"", ""FECH"& _ 
                "A_ORIGEN"", ""FECHA_DESTINO"") VALUES (:COD_VUEL, :AEROPUERTO, :ORIGEN, :DESTINO, :"& _ 
                "FECHA_ORIGEN, :FECHA_DESTINO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "AEROPUERTO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "AEROPUERTO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ORIGEN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ORIGEN"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DESTINO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESTINO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_ORIGEN"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_ORIGEN"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_DESTINO"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_DESTINO"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_VUEL, AEROPUERTO, ORIGEN, DESTINO, FECHA_ORIGEN, FECHA_DESTINO FROM AE"& _ 
                "RO.ESCALA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.ESCALADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.ESCALADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.ESCALADataTable = New Ds.ESCALADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.ESCALADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "ESCALA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_VUEL As Decimal, ByVal AEROPUERTO As Decimal, ByVal ORIGEN As Decimal, ByVal DESTINO As Decimal, ByVal FECHA_ORIGEN As Date, ByVal FECHA_DESTINO As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_VUEL,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(AEROPUERTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ORIGEN,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESTINO,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_ORIGEN,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_DESTINO,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LINEATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LINEA"
            tableMapping.ColumnMappings.Add("COD_LINE", "COD_LINE")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("COD_USUARIO", "COD_USUARIO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""LINEA"" WHERE ((""COD_LINE"" = :Original_COD_LINE) AND (""NOMBRE"""& _ 
                " = :Original_NOMBRE) AND (""COD_USUARIO"" = :Original_COD_USUARIO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""LINEA"" (""COD_LINE"", ""NOMBRE"", ""COD_USUARIO"") VALUES (:COD_LIN"& _ 
                "E, :NOMBRE, :COD_USUARIO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""LINEA"" SET ""COD_LINE"" = :COD_LINE, ""NOMBRE"" = :NOMBRE, ""COD_USUARI"& _ 
                "O"" = :COD_USUARIO WHERE ((""COD_LINE"" = :Original_COD_LINE) AND (""NOMBRE"" = :Orig"& _ 
                "inal_NOMBRE) AND (""COD_USUARIO"" = :Original_COD_USUARIO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_LINE, NOMBRE, COD_USUARIO FROM AERO.LINEA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.LINEADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.LINEADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.LINEADataTable = New Ds.LINEADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.LINEADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "LINEA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_LINE As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_USUARIO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_LINE,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_LINE As Decimal, ByVal NOMBRE As String, ByVal COD_USUARIO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_LINE,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_LINE As Decimal, ByVal NOMBRE As String, ByVal COD_USUARIO As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_USUARIO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_LINE,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COD_USUARIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_COD_LINE,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal COD_USUARIO As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_NOMBRE As String, ByVal Original_COD_USUARIO As Decimal) As Integer
            Return Me.Update(Original_COD_LINE, NOMBRE, COD_USUARIO, Original_COD_LINE, Original_NOMBRE, Original_COD_USUARIO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PAISTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PAIS"
            tableMapping.ColumnMappings.Add("COD_PA", "COD_PA")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""PAIS"" WHERE ((""COD_PA"" = :Original_COD_PA) AND (""NOMBRE"" = :O"& _ 
                "riginal_NOMBRE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""PAIS"" (""COD_PA"", ""NOMBRE"") VALUES (:COD_PA, :NOMBRE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""PAIS"" SET ""COD_PA"" = :COD_PA, ""NOMBRE"" = :NOMBRE WHERE ((""COD_PA"" "& _ 
                "= :Original_COD_PA) AND (""NOMBRE"" = :Original_NOMBRE))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PA"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_PA, NOMBRE FROM AERO.PAIS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.PAISDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.PAISDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.PAISDataTable = New Ds.PAISDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.PAISDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "PAIS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_PA As Decimal, ByVal Original_NOMBRE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_PA,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_PA As Decimal, ByVal NOMBRE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_PA,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_PA As Decimal, ByVal NOMBRE As String, ByVal Original_COD_PA As Decimal, ByVal Original_NOMBRE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_PA,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_COD_PA,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_NOMBRE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal Original_COD_PA As Decimal, ByVal Original_NOMBRE As String) As Integer
            Return Me.Update(Original_COD_PA, NOMBRE, Original_COD_PA, Original_NOMBRE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PERSONALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PERSONAL"
            tableMapping.ColumnMappings.Add("COD_PERSO", "COD_PERSO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("APELLIDO", "APELLIDO")
            tableMapping.ColumnMappings.Add("NACIONALIDAD", "NACIONALIDAD")
            tableMapping.ColumnMappings.Add("COD_PRO", "COD_PRO")
            tableMapping.ColumnMappings.Add("COD_LINE", "COD_LINE")
            tableMapping.ColumnMappings.Add("COD_USUARIO", "COD_USUARIO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""PERSONAL"" WHERE ((""COD_PERSO"" = :Original_COD_PERSO) AND (""NO"& _ 
                "MBRE"" = :Original_NOMBRE) AND (""APELLIDO"" = :Original_APELLIDO) AND (""NACIONALID"& _ 
                "AD"" = :Original_NACIONALIDAD) AND (""COD_PRO"" = :Original_COD_PRO) AND (""COD_LINE"& _ 
                """ = :Original_COD_LINE) AND (""COD_USUARIO"" = :Original_COD_USUARIO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PERSO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PERSO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NACIONALIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""PERSONAL"" (""COD_PERSO"", ""NOMBRE"", ""APELLIDO"", ""NACIONALIDAD"","& _ 
                " ""COD_PRO"", ""COD_LINE"", ""COD_USUARIO"") VALUES (:COD_PERSO, :NOMBRE, :APELLIDO, :"& _ 
                "NACIONALIDAD, :COD_PRO, :COD_LINE, :COD_USUARIO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PERSO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PERSO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NACIONALIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""PERSONAL"" SET ""COD_PERSO"" = :COD_PERSO, ""NOMBRE"" = :NOMBRE, ""APELL"& _ 
                "IDO"" = :APELLIDO, ""NACIONALIDAD"" = :NACIONALIDAD, ""COD_PRO"" = :COD_PRO, ""COD_LIN"& _ 
                "E"" = :COD_LINE, ""COD_USUARIO"" = :COD_USUARIO WHERE ((""COD_PERSO"" = :Original_COD"& _ 
                "_PERSO) AND (""NOMBRE"" = :Original_NOMBRE) AND (""APELLIDO"" = :Original_APELLIDO) "& _ 
                "AND (""NACIONALIDAD"" = :Original_NACIONALIDAD) AND (""COD_PRO"" = :Original_COD_PRO"& _ 
                ") AND (""COD_LINE"" = :Original_COD_LINE) AND (""COD_USUARIO"" = :Original_COD_USUAR"& _ 
                "IO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PERSO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PERSO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NACIONALIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PERSO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PERSO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "APELLIDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NACIONALIDAD"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "NACIONALIDAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_LINE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_LINE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_PERSO, NOMBRE, APELLIDO, NACIONALIDAD, COD_PRO, COD_LINE, COD_USUARIO "& _ 
                "FROM AERO.PERSONAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.PERSONALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.PERSONALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.PERSONALDataTable = New Ds.PERSONALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.PERSONALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "PERSONAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_PERSO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_APELLIDO As String, ByVal Original_NACIONALIDAD As Decimal, ByVal Original_COD_PRO As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_COD_USUARIO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_PERSO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APELLIDO")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_APELLIDO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NACIONALIDAD,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_COD_PRO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COD_LINE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_PERSO As Decimal, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal NACIONALIDAD As Decimal, ByVal COD_PRO As Decimal, ByVal COD_LINE As Decimal, ByVal COD_USUARIO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_PERSO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(APELLIDO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(NACIONALIDAD,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(COD_PRO,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(COD_LINE,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_PERSO As Decimal, ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal NACIONALIDAD As Decimal, ByVal COD_PRO As Decimal, ByVal COD_LINE As Decimal, ByVal COD_USUARIO As Decimal, ByVal Original_COD_PERSO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_APELLIDO As String, ByVal Original_NACIONALIDAD As Decimal, ByVal Original_COD_PRO As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_COD_USUARIO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_PERSO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(APELLIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NACIONALIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COD_PRO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COD_LINE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(COD_USUARIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_COD_PERSO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_APELLIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_NACIONALIDAD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_COD_PRO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_COD_LINE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_COD_USUARIO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal APELLIDO As String, ByVal NACIONALIDAD As Decimal, ByVal COD_PRO As Decimal, ByVal COD_LINE As Decimal, ByVal COD_USUARIO As Decimal, ByVal Original_COD_PERSO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_APELLIDO As String, ByVal Original_NACIONALIDAD As Decimal, ByVal Original_COD_PRO As Decimal, ByVal Original_COD_LINE As Decimal, ByVal Original_COD_USUARIO As Decimal) As Integer
            Return Me.Update(Original_COD_PERSO, NOMBRE, APELLIDO, NACIONALIDAD, COD_PRO, COD_LINE, COD_USUARIO, Original_COD_PERSO, Original_NOMBRE, Original_APELLIDO, Original_NACIONALIDAD, Original_COD_PRO, Original_COD_LINE, Original_COD_USUARIO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROFESIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROFESION"
            tableMapping.ColumnMappings.Add("COD_PRO", "COD_PRO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("SUELDO", "SUELDO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""PROFESION"" WHERE ((""COD_PRO"" = :Original_COD_PRO) AND (""NOMBR"& _ 
                "E"" = :Original_NOMBRE) AND (""SUELDO"" = :Original_SUELDO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUELDO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SUELDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""PROFESION"" (""COD_PRO"", ""NOMBRE"", ""SUELDO"") VALUES (:COD_PRO, "& _ 
                ":NOMBRE, :SUELDO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "SUELDO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SUELDO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""PROFESION"" SET ""COD_PRO"" = :COD_PRO, ""NOMBRE"" = :NOMBRE, ""SUELDO"" "& _ 
                "= :SUELDO WHERE ((""COD_PRO"" = :Original_COD_PRO) AND (""NOMBRE"" = :Original_NOMBR"& _ 
                "E) AND (""SUELDO"" = :Original_SUELDO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "SUELDO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SUELDO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_PRO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PRO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUELDO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "SUELDO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_PRO, NOMBRE, SUELDO FROM AERO.PROFESION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.PROFESIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.PROFESIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.PROFESIONDataTable = New Ds.PROFESIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.PROFESIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "PROFESION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_PRO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_SUELDO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_PRO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUELDO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_PRO As Decimal, ByVal NOMBRE As String, ByVal SUELDO As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_PRO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SUELDO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_PRO As Decimal, ByVal NOMBRE As String, ByVal SUELDO As Decimal, ByVal Original_COD_PRO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_SUELDO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_PRO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SUELDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_COD_PRO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SUELDO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal SUELDO As Decimal, ByVal Original_COD_PRO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_SUELDO As Decimal) As Integer
            Return Me.Update(Original_COD_PRO, NOMBRE, SUELDO, Original_COD_PRO, Original_NOMBRE, Original_SUELDO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TURNOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TURNO"
            tableMapping.ColumnMappings.Add("COD_PERSO", "COD_PERSO")
            tableMapping.ColumnMappings.Add("COD_VUEL", "COD_VUEL")
            tableMapping.ColumnMappings.Add("HORA_VUELO", "HORA_VUELO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""TURNO"" (""COD_PERSO"", ""COD_VUEL"", ""HORA_VUELO"") VALUES (:COD_P"& _ 
                "ERSO, :COD_VUEL, :HORA_VUELO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_PERSO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_PERSO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "HORA_VUELO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "HORA_VUELO"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_PERSO, COD_VUEL, HORA_VUELO FROM AERO.TURNO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.TURNODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.TURNODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.TURNODataTable = New Ds.TURNODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.TURNODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "TURNO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_PERSO As Decimal, ByVal COD_VUEL As Decimal, ByVal HORA_VUELO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_PERSO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COD_VUEL,Decimal)
            If (HORA_VUELO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HORA_VUELO")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(HORA_VUELO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class USUARIOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "USUARIO"
            tableMapping.ColumnMappings.Add("COD_USUARIO", "COD_USUARIO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("PASS", "PASS")
            tableMapping.ColumnMappings.Add("ADMIN", "ADMIN")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""USUARIO"" WHERE ((""COD_USUARIO"" = :Original_COD_USUARIO) AND ("& _ 
                """NOMBRE"" = :Original_NOMBRE) AND (""PASS"" = :Original_PASS) AND (""ADMIN"" = :Origi"& _ 
                "nal_ADMIN))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PASS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADMIN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ADMIN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""USUARIO"" (""COD_USUARIO"", ""NOMBRE"", ""PASS"", ""ADMIN"") VALUES (:"& _ 
                "COD_USUARIO, :NOMBRE, :PASS, :ADMIN)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "PASS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ADMIN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ADMIN"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""USUARIO"" SET ""COD_USUARIO"" = :COD_USUARIO, ""NOMBRE"" = :NOMBRE, ""PA"& _ 
                "SS"" = :PASS, ""ADMIN"" = :ADMIN WHERE ((""COD_USUARIO"" = :Original_COD_USUARIO) AND"& _ 
                " (""NOMBRE"" = :Original_NOMBRE) AND (""PASS"" = :Original_PASS) AND (""ADMIN"" = :Ori"& _ 
                "ginal_ADMIN))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "PASS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ADMIN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ADMIN"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_USUARIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_USUARIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "NOMBRE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_PASS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.IsNullable = true
            param.SourceColumn = "PASS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ADMIN"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ADMIN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_USUARIO, NOMBRE, PASS, ADMIN FROM AERO.USUARIO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.USUARIODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.USUARIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.USUARIODataTable = New Ds.USUARIODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.USUARIODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "USUARIO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_USUARIO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_PASS As String, ByVal Original_ADMIN As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_USUARIO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_PASS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASS")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PASS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ADMIN,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_USUARIO As Decimal, ByVal NOMBRE As String, ByVal PASS As String, ByVal ADMIN As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_USUARIO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (PASS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASS")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PASS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADMIN,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_USUARIO As Decimal, ByVal NOMBRE As String, ByVal PASS As String, ByVal ADMIN As Decimal, ByVal Original_COD_USUARIO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_PASS As String, ByVal Original_ADMIN As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_USUARIO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (PASS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASS")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PASS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADMIN,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_COD_USUARIO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_PASS Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASS")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PASS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ADMIN,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal PASS As String, ByVal ADMIN As Decimal, ByVal Original_COD_USUARIO As Decimal, ByVal Original_NOMBRE As String, ByVal Original_PASS As String, ByVal Original_ADMIN As Decimal) As Integer
            Return Me.Update(Original_COD_USUARIO, NOMBRE, PASS, ADMIN, Original_COD_USUARIO, Original_NOMBRE, Original_PASS, Original_ADMIN)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VUELOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.DataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.DataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.DataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.DataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.DataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.DataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.DataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.DataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.DataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.DataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VUELO"
            tableMapping.ColumnMappings.Add("COD_VUEL", "COD_VUEL")
            tableMapping.ColumnMappings.Add("DESPUEGUE", "DESPUEGUE")
            tableMapping.ColumnMappings.Add("ATERRISAJE", "ATERRISAJE")
            tableMapping.ColumnMappings.Add("FECHA_DESPEGUE", "FECHA_DESPEGUE")
            tableMapping.ColumnMappings.Add("FECHA_ATERRISAJE", "FECHA_ATERRISAJE")
            tableMapping.ColumnMappings.Add("COD_AVIO", "COD_AVIO")
            tableMapping.ColumnMappings.Add("LUNES", "LUNES")
            tableMapping.ColumnMappings.Add("MARTES", "MARTES")
            tableMapping.ColumnMappings.Add("MIERCOLES", "MIERCOLES")
            tableMapping.ColumnMappings.Add("JUEVES", "JUEVES")
            tableMapping.ColumnMappings.Add("VIERNES", "VIERNES")
            tableMapping.ColumnMappings.Add("SABADO", "SABADO")
            tableMapping.ColumnMappings.Add("DOMINGO", "DOMINGO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AERO"".""VUELO"" WHERE ((""COD_VUEL"" = :Original_COD_VUEL) AND (""DESPUEG"& _ 
                "UE"" = :Original_DESPUEGUE) AND (""ATERRISAJE"" = :Original_ATERRISAJE) AND (""FECHA"& _ 
                "_DESPEGUE"" = :Original_FECHA_DESPEGUE) AND (""FECHA_ATERRISAJE"" = :Original_FECHA"& _ 
                "_ATERRISAJE) AND (""COD_AVIO"" = :Original_COD_AVIO) AND ((:IsNull_LUNES = 1 AND """& _ 
                "LUNES"" IS NULL) OR (""LUNES"" = :Original_LUNES)) AND ((:IsNull_MARTES = 1 AND ""MA"& _ 
                "RTES"" IS NULL) OR (""MARTES"" = :Original_MARTES)) AND ((:IsNull_MIERCOLES = 1 AND"& _ 
                " ""MIERCOLES"" IS NULL) OR (""MIERCOLES"" = :Original_MIERCOLES)) AND ((:IsNull_JUEV"& _ 
                "ES = 1 AND ""JUEVES"" IS NULL) OR (""JUEVES"" = :Original_JUEVES)) AND ((:IsNull_VIE"& _ 
                "RNES = 1 AND ""VIERNES"" IS NULL) OR (""VIERNES"" = :Original_VIERNES)) AND ((:IsNul"& _ 
                "l_SABADO = 1 AND ""SABADO"" IS NULL) OR (""SABADO"" = :Original_SABADO)) AND ((:IsNu"& _ 
                "ll_DOMINGO = 1 AND ""DOMINGO"" IS NULL) OR (""DOMINGO"" = :Original_DOMINGO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DESPUEGUE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESPUEGUE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ATERRISAJE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_DESPEGUE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_DESPEGUE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_ATERRISAJE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_LUNES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LUNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LUNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "LUNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MARTES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "MARTES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MARTES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MARTES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MIERCOLES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "MIERCOLES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MIERCOLES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MIERCOLES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_JUEVES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "JUEVES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_JUEVES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "JUEVES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_VIERNES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "VIERNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VIERNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VIERNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SABADO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SABADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SABADO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "SABADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOMINGO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "DOMINGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOMINGO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "DOMINGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AERO"".""VUELO"" (""COD_VUEL"", ""DESPUEGUE"", ""ATERRISAJE"", ""FECHA_DESPEGU"& _ 
                "E"", ""FECHA_ATERRISAJE"", ""COD_AVIO"", ""LUNES"", ""MARTES"", ""MIERCOLES"", ""JUEVES"", ""V"& _ 
                "IERNES"", ""SABADO"", ""DOMINGO"") VALUES (:COD_VUEL, :DESPUEGUE, :ATERRISAJE, :FECHA"& _ 
                "_DESPEGUE, :FECHA_ATERRISAJE, :COD_AVIO, :LUNES, :MARTES, :MIERCOLES, :JUEVES, :"& _ 
                "VIERNES, :SABADO, :DOMINGO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DESPUEGUE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESPUEGUE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ATERRISAJE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_DESPEGUE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_DESPEGUE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_ATERRISAJE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "LUNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "LUNES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "MARTES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MARTES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "MIERCOLES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MIERCOLES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "JUEVES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "JUEVES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "VIERNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VIERNES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "SABADO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "SABADO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DOMINGO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "DOMINGO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AERO"".""VUELO"" SET ""COD_VUEL"" = :COD_VUEL, ""DESPUEGUE"" = :DESPUEGUE, ""ATER"& _ 
                "RISAJE"" = :ATERRISAJE, ""FECHA_DESPEGUE"" = :FECHA_DESPEGUE, ""FECHA_ATERRISAJE"" = "& _ 
                ":FECHA_ATERRISAJE, ""COD_AVIO"" = :COD_AVIO, ""LUNES"" = :LUNES, ""MARTES"" = :MARTES,"& _ 
                " ""MIERCOLES"" = :MIERCOLES, ""JUEVES"" = :JUEVES, ""VIERNES"" = :VIERNES, ""SABADO"" = "& _ 
                ":SABADO, ""DOMINGO"" = :DOMINGO WHERE ((""COD_VUEL"" = :Original_COD_VUEL) AND (""DES"& _ 
                "PUEGUE"" = :Original_DESPUEGUE) AND (""ATERRISAJE"" = :Original_ATERRISAJE) AND (""F"& _ 
                "ECHA_DESPEGUE"" = :Original_FECHA_DESPEGUE) AND (""FECHA_ATERRISAJE"" = :Original_F"& _ 
                "ECHA_ATERRISAJE) AND (""COD_AVIO"" = :Original_COD_AVIO) AND ((:IsNull_LUNES = 1 A"& _ 
                "ND ""LUNES"" IS NULL) OR (""LUNES"" = :Original_LUNES)) AND ((:IsNull_MARTES = 1 AND"& _ 
                " ""MARTES"" IS NULL) OR (""MARTES"" = :Original_MARTES)) AND ((:IsNull_MIERCOLES = 1"& _ 
                " AND ""MIERCOLES"" IS NULL) OR (""MIERCOLES"" = :Original_MIERCOLES)) AND ((:IsNull_"& _ 
                "JUEVES = 1 AND ""JUEVES"" IS NULL) OR (""JUEVES"" = :Original_JUEVES)) AND ((:IsNull"& _ 
                "_VIERNES = 1 AND ""VIERNES"" IS NULL) OR (""VIERNES"" = :Original_VIERNES)) AND ((:I"& _ 
                "sNull_SABADO = 1 AND ""SABADO"" IS NULL) OR (""SABADO"" = :Original_SABADO)) AND ((:"& _ 
                "IsNull_DOMINGO = 1 AND ""DOMINGO"" IS NULL) OR (""DOMINGO"" = :Original_DOMINGO)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DESPUEGUE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESPUEGUE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ATERRISAJE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_DESPEGUE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_DESPEGUE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "FECHA_ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_ATERRISAJE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "LUNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "LUNES"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "MARTES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MARTES"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "MIERCOLES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MIERCOLES"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "JUEVES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "JUEVES"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "VIERNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VIERNES"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "SABADO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "SABADO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "DOMINGO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "DOMINGO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_VUEL"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_VUEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DESPUEGUE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "DESPUEGUE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ATERRISAJE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_DESPEGUE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_DESPEGUE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_FECHA_ATERRISAJE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "FECHA_ATERRISAJE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_COD_AVIO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "COD_AVIO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_LUNES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "LUNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LUNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "LUNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MARTES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "MARTES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MARTES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MARTES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MIERCOLES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "MIERCOLES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MIERCOLES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "MIERCOLES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_JUEVES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "JUEVES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_JUEVES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "JUEVES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_VIERNES"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "VIERNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_VIERNES"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "VIERNES"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SABADO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "SABADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SABADO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "SABADO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_DOMINGO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "DOMINGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DOMINGO"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.NChar
            param.IsNullable = true
            param.SourceColumn = "DOMINGO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.DataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.AerOS.My.MySettings.Default.CnnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.DataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_VUEL, DESPUEGUE, ATERRISAJE, FECHA_DESPEGUE, FECHA_ATERRISAJE, COD_AVI"& _ 
                "O, LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO FROM AERO.VUELO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Ds.VUELODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Ds.VUELODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Ds.VUELODataTable = New Ds.VUELODataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Ds.VUELODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Ds) As Integer
            Return Me.Adapter.Update(dataSet, "VUELO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_VUEL As Decimal, ByVal Original_DESPUEGUE As Decimal, ByVal Original_ATERRISAJE As Decimal, ByVal Original_FECHA_DESPEGUE As Date, ByVal Original_FECHA_ATERRISAJE As Date, ByVal Original_COD_AVIO As Decimal, ByVal Original_LUNES As String, ByVal Original_MARTES As String, ByVal Original_MIERCOLES As String, ByVal Original_JUEVES As String, ByVal Original_VIERNES As String, ByVal Original_SABADO As String, ByVal Original_DOMINGO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_VUEL,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DESPUEGUE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ATERRISAJE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_DESPEGUE,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FECHA_ATERRISAJE,Date)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COD_AVIO,Decimal)
            If (Original_LUNES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_LUNES,String)
            End If
            If (Original_MARTES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MARTES,String)
            End If
            If (Original_MIERCOLES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_MIERCOLES,String)
            End If
            If (Original_JUEVES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_JUEVES,String)
            End If
            If (Original_VIERNES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_VIERNES,String)
            End If
            If (Original_SABADO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SABADO,String)
            End If
            If (Original_DOMINGO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_DOMINGO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_VUEL As Decimal, ByVal DESPUEGUE As Decimal, ByVal ATERRISAJE As Decimal, ByVal FECHA_DESPEGUE As Date, ByVal FECHA_ATERRISAJE As Date, ByVal COD_AVIO As Decimal, ByVal LUNES As String, ByVal MARTES As String, ByVal MIERCOLES As String, ByVal JUEVES As String, ByVal VIERNES As String, ByVal SABADO As String, ByVal DOMINGO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_VUEL,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESPUEGUE,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ATERRISAJE,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_DESPEGUE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_ATERRISAJE,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(COD_AVIO,Decimal)
            If (LUNES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LUNES,String)
            End If
            If (MARTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MARTES,String)
            End If
            If (MIERCOLES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MIERCOLES,String)
            End If
            If (JUEVES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(JUEVES,String)
            End If
            If (VIERNES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(VIERNES,String)
            End If
            If (SABADO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SABADO,String)
            End If
            If (DOMINGO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DOMINGO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COD_VUEL As Decimal,  _
                    ByVal DESPUEGUE As Decimal,  _
                    ByVal ATERRISAJE As Decimal,  _
                    ByVal FECHA_DESPEGUE As Date,  _
                    ByVal FECHA_ATERRISAJE As Date,  _
                    ByVal COD_AVIO As Decimal,  _
                    ByVal LUNES As String,  _
                    ByVal MARTES As String,  _
                    ByVal MIERCOLES As String,  _
                    ByVal JUEVES As String,  _
                    ByVal VIERNES As String,  _
                    ByVal SABADO As String,  _
                    ByVal DOMINGO As String,  _
                    ByVal Original_COD_VUEL As Decimal,  _
                    ByVal Original_DESPUEGUE As Decimal,  _
                    ByVal Original_ATERRISAJE As Decimal,  _
                    ByVal Original_FECHA_DESPEGUE As Date,  _
                    ByVal Original_FECHA_ATERRISAJE As Date,  _
                    ByVal Original_COD_AVIO As Decimal,  _
                    ByVal Original_LUNES As String,  _
                    ByVal Original_MARTES As String,  _
                    ByVal Original_MIERCOLES As String,  _
                    ByVal Original_JUEVES As String,  _
                    ByVal Original_VIERNES As String,  _
                    ByVal Original_SABADO As String,  _
                    ByVal Original_DOMINGO As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_VUEL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESPUEGUE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ATERRISAJE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_DESPEGUE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_ATERRISAJE,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COD_AVIO,Decimal)
            If (LUNES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LUNES,String)
            End If
            If (MARTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MARTES,String)
            End If
            If (MIERCOLES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MIERCOLES,String)
            End If
            If (JUEVES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(JUEVES,String)
            End If
            If (VIERNES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(VIERNES,String)
            End If
            If (SABADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SABADO,String)
            End If
            If (DOMINGO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DOMINGO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_COD_VUEL,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DESPUEGUE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ATERRISAJE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_FECHA_DESPEGUE,Date)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FECHA_ATERRISAJE,Date)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_COD_AVIO,Decimal)
            If (Original_LUNES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_LUNES,String)
            End If
            If (Original_MARTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_MARTES,String)
            End If
            If (Original_MIERCOLES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_MIERCOLES,String)
            End If
            If (Original_JUEVES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_JUEVES,String)
            End If
            If (Original_VIERNES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_VIERNES,String)
            End If
            If (Original_SABADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SABADO,String)
            End If
            If (Original_DOMINGO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_DOMINGO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DESPUEGUE As Decimal,  _
                    ByVal ATERRISAJE As Decimal,  _
                    ByVal FECHA_DESPEGUE As Date,  _
                    ByVal FECHA_ATERRISAJE As Date,  _
                    ByVal COD_AVIO As Decimal,  _
                    ByVal LUNES As String,  _
                    ByVal MARTES As String,  _
                    ByVal MIERCOLES As String,  _
                    ByVal JUEVES As String,  _
                    ByVal VIERNES As String,  _
                    ByVal SABADO As String,  _
                    ByVal DOMINGO As String,  _
                    ByVal Original_COD_VUEL As Decimal,  _
                    ByVal Original_DESPUEGUE As Decimal,  _
                    ByVal Original_ATERRISAJE As Decimal,  _
                    ByVal Original_FECHA_DESPEGUE As Date,  _
                    ByVal Original_FECHA_ATERRISAJE As Date,  _
                    ByVal Original_COD_AVIO As Decimal,  _
                    ByVal Original_LUNES As String,  _
                    ByVal Original_MARTES As String,  _
                    ByVal Original_MIERCOLES As String,  _
                    ByVal Original_JUEVES As String,  _
                    ByVal Original_VIERNES As String,  _
                    ByVal Original_SABADO As String,  _
                    ByVal Original_DOMINGO As String) As Integer
            Return Me.Update(Original_COD_VUEL, DESPUEGUE, ATERRISAJE, FECHA_DESPEGUE, FECHA_ATERRISAJE, COD_AVIO, LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO, Original_COD_VUEL, Original_DESPUEGUE, Original_ATERRISAJE, Original_FECHA_DESPEGUE, Original_FECHA_ATERRISAJE, Original_COD_AVIO, Original_LUNES, Original_MARTES, Original_MIERCOLES, Original_JUEVES, Original_VIERNES, Original_SABADO, Original_DOMINGO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Procedimientos
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.DataAccess.Client.OracleCommand()
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Connection = New Global.Oracle.DataAccess.Client.OracleConnection(Global.AerOS.My.MySettings.Default.CnnStr)
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).CommandText = "AERO.INSERTAR_CLIENTE"
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.Oracle.DataAccess.Client.OracleParameter = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_DPI"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_PASSP"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_NACION"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_FECHA"
            param.DbType = Global.System.Data.DbType.DateTime
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_NOMBRE"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_APELLIDO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_USUARIO"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
            param = New Global.Oracle.DataAccess.Client.OracleParameter()
            param.ParameterName = "P_PASS"
            param.OracleDbTypeEx = Global.Oracle.DataAccess.Client.OracleDbType.Varchar2
            param.Size = 32768
            param.IsNullable = true
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function INSERTAR_CLIENTE(ByVal P_DPI As String, ByVal P_PASSP As String, ByVal P_NACION As String, ByVal P_FECHA As Global.System.Nullable(Of Date), ByVal P_NOMBRE As String, ByVal P_APELLIDO As String, ByVal P_USUARIO As String, ByVal P_PASS As String) As Integer
            Dim command As Global.Oracle.DataAccess.Client.OracleCommand = CType(Me.CommandCollection(0),Global.Oracle.DataAccess.Client.OracleCommand)
            If (P_DPI Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(P_DPI,String)
            End If
            If (P_PASSP Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(P_PASSP,String)
            End If
            If (P_NACION Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(P_NACION,String)
            End If
            If (P_FECHA.HasValue = true) Then
                command.Parameters(3).Value = CType(P_FECHA.Value,Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (P_NOMBRE Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(P_NOMBRE,String)
            End If
            If (P_APELLIDO Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(P_APELLIDO,String)
            End If
            If (P_USUARIO Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(P_USUARIO,String)
            End If
            If (P_PASS Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(P_PASS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aEROPUERTOTableAdapter As AEROPUERTOTableAdapter
        
        Private _aVIONTableAdapter As AVIONTableAdapter
        
        Private _bOLETOTableAdapter As BOLETOTableAdapter
        
        Private _cIUDADTableAdapter As CIUDADTableAdapter
        
        Private _cLIENTETableAdapter As CLIENTETableAdapter
        
        Private _eSCALATableAdapter As ESCALATableAdapter
        
        Private _lINEATableAdapter As LINEATableAdapter
        
        Private _pAISTableAdapter As PAISTableAdapter
        
        Private _pERSONALTableAdapter As PERSONALTableAdapter
        
        Private _pROFESIONTableAdapter As PROFESIONTableAdapter
        
        Private _tURNOTableAdapter As TURNOTableAdapter
        
        Private _uSUARIOTableAdapter As USUARIOTableAdapter
        
        Private _vUELOTableAdapter As VUELOTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AEROPUERTOTableAdapter() As AEROPUERTOTableAdapter
            Get
                Return Me._aEROPUERTOTableAdapter
            End Get
            Set
                Me._aEROPUERTOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AVIONTableAdapter() As AVIONTableAdapter
            Get
                Return Me._aVIONTableAdapter
            End Get
            Set
                Me._aVIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BOLETOTableAdapter() As BOLETOTableAdapter
            Get
                Return Me._bOLETOTableAdapter
            End Get
            Set
                Me._bOLETOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CIUDADTableAdapter() As CIUDADTableAdapter
            Get
                Return Me._cIUDADTableAdapter
            End Get
            Set
                Me._cIUDADTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CLIENTETableAdapter() As CLIENTETableAdapter
            Get
                Return Me._cLIENTETableAdapter
            End Get
            Set
                Me._cLIENTETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ESCALATableAdapter() As ESCALATableAdapter
            Get
                Return Me._eSCALATableAdapter
            End Get
            Set
                Me._eSCALATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LINEATableAdapter() As LINEATableAdapter
            Get
                Return Me._lINEATableAdapter
            End Get
            Set
                Me._lINEATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PAISTableAdapter() As PAISTableAdapter
            Get
                Return Me._pAISTableAdapter
            End Get
            Set
                Me._pAISTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PERSONALTableAdapter() As PERSONALTableAdapter
            Get
                Return Me._pERSONALTableAdapter
            End Get
            Set
                Me._pERSONALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PROFESIONTableAdapter() As PROFESIONTableAdapter
            Get
                Return Me._pROFESIONTableAdapter
            End Get
            Set
                Me._pROFESIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TURNOTableAdapter() As TURNOTableAdapter
            Get
                Return Me._tURNOTableAdapter
            End Get
            Set
                Me._tURNOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property USUARIOTableAdapter() As USUARIOTableAdapter
            Get
                Return Me._uSUARIOTableAdapter
            End Get
            Set
                Me._uSUARIOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VUELOTableAdapter() As VUELOTableAdapter
            Get
                Return Me._vUELOTableAdapter
            End Get
            Set
                Me._vUELOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aEROPUERTOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aEROPUERTOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aEROPUERTOTableAdapter.Connection
                End If
                If ((Not (Me._aVIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aVIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aVIONTableAdapter.Connection
                End If
                If ((Not (Me._bOLETOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bOLETOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bOLETOTableAdapter.Connection
                End If
                If ((Not (Me._cIUDADTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cIUDADTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cIUDADTableAdapter.Connection
                End If
                If ((Not (Me._cLIENTETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cLIENTETableAdapter.Connection) Is Nothing)) Then
                    Return Me._cLIENTETableAdapter.Connection
                End If
                If ((Not (Me._eSCALATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eSCALATableAdapter.Connection) Is Nothing)) Then
                    Return Me._eSCALATableAdapter.Connection
                End If
                If ((Not (Me._lINEATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lINEATableAdapter.Connection) Is Nothing)) Then
                    Return Me._lINEATableAdapter.Connection
                End If
                If ((Not (Me._pAISTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pAISTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pAISTableAdapter.Connection
                End If
                If ((Not (Me._pERSONALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pERSONALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pERSONALTableAdapter.Connection
                End If
                If ((Not (Me._pROFESIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pROFESIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pROFESIONTableAdapter.Connection
                End If
                If ((Not (Me._tURNOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tURNOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tURNOTableAdapter.Connection
                End If
                If ((Not (Me._uSUARIOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uSUARIOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uSUARIOTableAdapter.Connection
                End If
                If ((Not (Me._vUELOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vUELOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vUELOTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aEROPUERTOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aVIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._bOLETOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cIUDADTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cLIENTETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eSCALATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lINEATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pAISTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pROFESIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tURNOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uSUARIOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vUELOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Ds, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pAISTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PAIS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pAISTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cIUDADTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CIUDAD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cIUDADTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lINEATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LINEA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lINEATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aEROPUERTOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AEROPUERTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aEROPUERTOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aVIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AVION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aVIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pROFESIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PROFESION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pROFESIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uSUARIOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.USUARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uSUARIOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cLIENTETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CLIENTE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cLIENTETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vUELOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VUELO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vUELOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bOLETOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BOLETO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bOLETOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eSCALATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ESCALA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eSCALATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tURNOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TURNO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tURNOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Ds, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pAISTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PAIS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pAISTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cIUDADTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CIUDAD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cIUDADTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lINEATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LINEA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lINEATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aEROPUERTOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AEROPUERTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aEROPUERTOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aVIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AVION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aVIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pROFESIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PROFESION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pROFESIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uSUARIOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.USUARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uSUARIOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cLIENTETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CLIENTE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cLIENTETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vUELOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VUELO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vUELOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bOLETOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BOLETO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bOLETOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eSCALATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ESCALA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eSCALATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tURNOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TURNO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tURNOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Ds, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tURNOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TURNO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tURNOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eSCALATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ESCALA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eSCALATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bOLETOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BOLETO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bOLETOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vUELOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VUELO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vUELOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PERSONAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pERSONALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cLIENTETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CLIENTE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cLIENTETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uSUARIOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.USUARIO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uSUARIOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pROFESIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PROFESION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pROFESIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aVIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AVION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aVIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aEROPUERTOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AEROPUERTO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aEROPUERTOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lINEATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LINEA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lINEATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cIUDADTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CIUDAD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cIUDADTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pAISTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PAIS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pAISTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Ds) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aEROPUERTOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aEROPUERTOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._aVIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aVIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._bOLETOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bOLETOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cIUDADTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cIUDADTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._cLIENTETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cLIENTETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._eSCALATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eSCALATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._lINEATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lINEATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._pAISTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pAISTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._pERSONALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pERSONALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._pROFESIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pROFESIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._tURNOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tURNOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._uSUARIOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uSUARIOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._vUELOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vUELOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aEROPUERTOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aEROPUERTOTableAdapter, Me._aEROPUERTOTableAdapter.Connection)
                    Me._aEROPUERTOTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._aEROPUERTOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._aEROPUERTOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aEROPUERTOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aEROPUERTOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aVIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aVIONTableAdapter, Me._aVIONTableAdapter.Connection)
                    Me._aVIONTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._aVIONTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._aVIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aVIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aVIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._bOLETOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bOLETOTableAdapter, Me._bOLETOTableAdapter.Connection)
                    Me._bOLETOTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._bOLETOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._bOLETOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bOLETOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bOLETOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cIUDADTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cIUDADTableAdapter, Me._cIUDADTableAdapter.Connection)
                    Me._cIUDADTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._cIUDADTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._cIUDADTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cIUDADTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cIUDADTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cLIENTETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cLIENTETableAdapter, Me._cLIENTETableAdapter.Connection)
                    Me._cLIENTETableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._cLIENTETableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._cLIENTETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cLIENTETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cLIENTETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eSCALATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eSCALATableAdapter, Me._eSCALATableAdapter.Connection)
                    Me._eSCALATableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._eSCALATableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._eSCALATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eSCALATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eSCALATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lINEATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lINEATableAdapter, Me._lINEATableAdapter.Connection)
                    Me._lINEATableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._lINEATableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._lINEATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lINEATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lINEATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pAISTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pAISTableAdapter, Me._pAISTableAdapter.Connection)
                    Me._pAISTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._pAISTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._pAISTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pAISTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pAISTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pERSONALTableAdapter, Me._pERSONALTableAdapter.Connection)
                    Me._pERSONALTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._pERSONALTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._pERSONALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pERSONALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pERSONALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pROFESIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pROFESIONTableAdapter, Me._pROFESIONTableAdapter.Connection)
                    Me._pROFESIONTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._pROFESIONTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._pROFESIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pROFESIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pROFESIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tURNOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tURNOTableAdapter, Me._tURNOTableAdapter.Connection)
                    Me._tURNOTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._tURNOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._tURNOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tURNOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tURNOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uSUARIOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uSUARIOTableAdapter, Me._uSUARIOTableAdapter.Connection)
                    Me._uSUARIOTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._uSUARIOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._uSUARIOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uSUARIOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uSUARIOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vUELOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vUELOTableAdapter, Me._vUELOTableAdapter.Connection)
                    Me._vUELOTableAdapter.Connection = CType(workConnection,Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._vUELOTableAdapter.Transaction = CType(workTransaction,Global.Oracle.DataAccess.Client.OracleTransaction)
                    If Me._vUELOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vUELOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vUELOTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aEROPUERTOTableAdapter) Is Nothing) Then
                    Me._aEROPUERTOTableAdapter.Connection = CType(revertConnections(Me._aEROPUERTOTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._aEROPUERTOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aVIONTableAdapter) Is Nothing) Then
                    Me._aVIONTableAdapter.Connection = CType(revertConnections(Me._aVIONTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._aVIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._bOLETOTableAdapter) Is Nothing) Then
                    Me._bOLETOTableAdapter.Connection = CType(revertConnections(Me._bOLETOTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._bOLETOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cIUDADTableAdapter) Is Nothing) Then
                    Me._cIUDADTableAdapter.Connection = CType(revertConnections(Me._cIUDADTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._cIUDADTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cLIENTETableAdapter) Is Nothing) Then
                    Me._cLIENTETableAdapter.Connection = CType(revertConnections(Me._cLIENTETableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._cLIENTETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eSCALATableAdapter) Is Nothing) Then
                    Me._eSCALATableAdapter.Connection = CType(revertConnections(Me._eSCALATableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._eSCALATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lINEATableAdapter) Is Nothing) Then
                    Me._lINEATableAdapter.Connection = CType(revertConnections(Me._lINEATableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._lINEATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pAISTableAdapter) Is Nothing) Then
                    Me._pAISTableAdapter.Connection = CType(revertConnections(Me._pAISTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._pAISTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pERSONALTableAdapter) Is Nothing) Then
                    Me._pERSONALTableAdapter.Connection = CType(revertConnections(Me._pERSONALTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._pERSONALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pROFESIONTableAdapter) Is Nothing) Then
                    Me._pROFESIONTableAdapter.Connection = CType(revertConnections(Me._pROFESIONTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._pROFESIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tURNOTableAdapter) Is Nothing) Then
                    Me._tURNOTableAdapter.Connection = CType(revertConnections(Me._tURNOTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._tURNOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uSUARIOTableAdapter) Is Nothing) Then
                    Me._uSUARIOTableAdapter.Connection = CType(revertConnections(Me._uSUARIOTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._uSUARIOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vUELOTableAdapter) Is Nothing) Then
                    Me._vUELOTableAdapter.Connection = CType(revertConnections(Me._vUELOTableAdapter),Global.Oracle.DataAccess.Client.OracleConnection)
                    Me._vUELOTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
